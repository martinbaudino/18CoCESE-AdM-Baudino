
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004840  08004840  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004848  08004848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000c92d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f6b7  00000000  00000000  0002c969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d7d  00000000  00000000  0003c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b90  00000000  00000000  0003dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000da08f  00000000  00000000  0003e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ad8  00000000  00000000  001189c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b7d  00000000  00000000  00119498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d015  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003144  00000000  00000000  0013d068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080044a8 	.word	0x080044a8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080044a8 	.word	0x080044a8

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_zeros>:
@ Registros utilizados:
@	r2: registro auxiliar

.thumb_func
    asm_zeros:
    	mov 	r2, 0			@ Valor 0 para sobrescribir el vector
 80001f0:	f04f 0200 	mov.w	r2, #0

080001f4 <asm_zeros_bucle>:

    asm_zeros_bucle:
    	str 	r2, [r0]		@ Guarda R2 (0) en la dirección que indica R0
 80001f4:	6002      	str	r2, [r0, #0]
    	add 	r0, 4			@ Desplaza la dirección de R0 de a 4 bytes (32bits)
 80001f6:	f100 0004 	add.w	r0, r0, #4
    	subs 	r1, 1			@ Le resta a uno a R1, cantidad de items que faltan
 80001fa:	3901      	subs	r1, #1
    	bne 	asm_zeros_bucle	@ procesar. Mientras la resta no sea 0, continúa
 80001fc:	d1fa      	bne.n	80001f4 <asm_zeros_bucle>

080001fe <asm_zeros_salir>:
    							@ iterando en el bucle
    asm_zeros_salir:
    	bx 		lr
 80001fe:	4770      	bx	lr

08000200 <asm_productoEscalar32>:
@ Registros utilizados:
@	r4: registro auxiliar, valor de cada elemento de vectorIn

.thumb_func
    asm_productoEscalar32:
    	push 	{r4}		@ Guarda R4 en la pila, si se pone el randgo es {r4-r6}
 8000200:	b410      	push	{r4}

08000202 <asm_productoEscalar32_bucle>:

    asm_productoEscalar32_bucle:
    	ldr		r4, [r0], #4	@ Carga en R4 el valor al que apunta R0, e incrementa
 8000202:	f850 4b04 	ldr.w	r4, [r0], #4
    						@ R0 en 4 bytes (32 bits) para ir al próx. elemento

    	mul 	r4, r3			@ Realiza la multiplicación, resultado en R4
 8000206:	fb03 f404 	mul.w	r4, r3, r4

    	str 	r4, [r1], #4	@ Guarda el resultado en la dirección a la que apunto
 800020a:	f841 4b04 	str.w	r4, [r1], #4
    						@ R1, y lo incrementa en 4 bytes para ir al próx. elem.
    	subs 	r2, 1
 800020e:	3a01      	subs	r2, #1
    	bne 	asm_productoEscalar32_bucle
 8000210:	d1f7      	bne.n	8000202 <asm_productoEscalar32_bucle>

08000212 <asm_productoEscalar32_salir>:

    asm_productoEscalar32_salir:
    	pop 	{r4}		@ Recupera r4 antes de volver a la aplicación
 8000212:	bc10      	pop	{r4}
    	bx 		lr
 8000214:	4770      	bx	lr

08000216 <asm_productoEscalar16>:
@ Registros utilizados:
@	r4: registro auxiliar, valor de cada elemento de vectorIn

.thumb_func
    asm_productoEscalar16:
    	push 	{r4}
 8000216:	b410      	push	{r4}

08000218 <asm_productoEscalar16_bucle>:

    asm_productoEscalar16_bucle:
    	ldrh 	r4, [r0], #2	@ Carga en R4 el valor al que apunta R0, e incrementa
 8000218:	f830 4b02 	ldrh.w	r4, [r0], #2
    							@ R0 en 2 bytes (16 bits) para ir al próx. elemento

    	mul 	r4, r3
 800021c:	fb03 f404 	mul.w	r4, r3, r4
    	strh 	r4, [r1], #2	@ Guarda el resultado en la dirección a la que apunto
 8000220:	f821 4b02 	strh.w	r4, [r1], #2
    							@ R1, y lo incrementa en 2 bytes para ir al próx. elem.

    	subs 	r2, 1
 8000224:	3a01      	subs	r2, #1
    	bne 	asm_productoEscalar16_bucle
 8000226:	d1f7      	bne.n	8000218 <asm_productoEscalar16_bucle>

08000228 <asm_productoEscalar16_salir>:

    asm_productoEscalar16_salir:
    	pop		{r4}
 8000228:	bc10      	pop	{r4}
    	bx 		lr
 800022a:	4770      	bx	lr

0800022c <asm_productoEscalar12>:
@ Registros utilizados:
@	r4: registro auxiliar, valor de cada elemento de vectorIn

.thumb_func
    asm_productoEscalar12:
    	push 	{r4}
 800022c:	b410      	push	{r4}

    	mrs 	r4, APSR			@ Carga APSR a registro de propósito general
 800022e:	f3ef 8400 	mrs	r4, CPSR
    	bfc 	r4, 27, 1			@ Modifica flag Q
 8000232:	f36f 64db 	bfc	r4, #27, #1
    	msr 	APSR_nzcvq, r4		@ Guarda resultado de vuelta en APSR
 8000236:	f384 8800 	msr	CPSR_f, r4

0800023a <asm_productoEscalar12_bucle>:

    asm_productoEscalar12_bucle:
    	ldrh	r4, [r0], #2
 800023a:	f830 4b02 	ldrh.w	r4, [r0], #2

    	mul 	r4, r3
 800023e:	fb03 f404 	mul.w	r4, r3, r4
    	usat 	r4, #12, r4		@ Aplica saturación a 12 bits (3 bytes)
 8000242:	f384 040c 	usat	r4, #12, r4
    	strh 	r4, [r1], #2
 8000246:	f821 4b02 	strh.w	r4, [r1], #2

    	subs 	r2, 1
 800024a:	3a01      	subs	r2, #1
    	bne 	asm_productoEscalar12_bucle
 800024c:	d1f5      	bne.n	800023a <asm_productoEscalar12_bucle>

0800024e <asm_productoEscalar12_salir>:

    asm_productoEscalar12_salir:
    	pop 	{r4}
 800024e:	bc10      	pop	{r4}
    	bx 		lr
 8000250:	4770      	bx	lr

08000252 <asm_filtroVentana10>:
@	r5: índice para comparación de tamaño de ventana
@   r6: registro auxiliar: promedio calculado en cada ciclo y resta con i

.thumb_func
    asm_filtroVentana10:
    	push 	{r4-r6}
 8000252:	b470      	push	{r4, r5, r6}

		cmp 	r0, #0				@ vectorIn != NULL
 8000254:	2800      	cmp	r0, #0
        beq 	asm_filtroVentana10_salir
 8000256:	d017      	beq.n	8000288 <asm_filtroVentana10_salir>
        cmp 	r1, #0				@ vectorOut != NULL
 8000258:	2900      	cmp	r1, #0
        beq 	asm_filtroVentana10_salir
 800025a:	d015      	beq.n	8000288 <asm_filtroVentana10_salir>

		mov 	r3, #0				@ acumulador = 0
 800025c:	f04f 0300 	mov.w	r3, #0
		mov 	r5, #0				@ i = 0
 8000260:	f04f 0500 	mov.w	r5, #0

08000264 <asm_filtroVentana10_bucle>:

    asm_filtroVentana10_bucle:
    	ldrh	r4, [r0], #2
 8000264:	f830 4b02 	ldrh.w	r4, [r0], #2
    	add 	r3, r4			@ acumulador += vectorIn[i]
 8000268:	4423      	add	r3, r4

    	cmp		r5, #10			@ if (i >= tam_ventana) en cant. de elem.
 800026a:	2d0a      	cmp	r5, #10
    	itt		ge				@ Las siguientes dos instrucciones solo se
 800026c:	bfa4      	itt	ge
    							@ ejecutan cuando el índice es mayor que el
    							@ tamaño de la ventana
		ldrhge	r6, [r0, #-20] 	@ R6: vectorIn[i - tam_ventana] y tam_ventana
 800026e:	f830 6c14 	ldrhge.w	r6, [r0, #-20]
								@ tiene 20 bytes porque cada elemento es de 2
    	subge	r3, r3, r6 		@ R3: acumulador -= vectorIn[i - tam_ventana]
 8000272:	1b9b      	subge	r3, r3, r6

		movw 	r6, #10			@ R6: cantidad de elementos de la ventana es 10
 8000274:	f240 060a 	movw	r6, #10
    	udiv	r6, r3, r6		@ R6: acumulador / tam_ventana
 8000278:	fbb3 f6f6 	udiv	r6, r3, r6
    	strh	r6, [r1], #2	@ vectorOut[i] = acumulador / tam_ventana
 800027c:	f821 6b02 	strh.w	r6, [r1], #2

    	add		r5, 1			@ i++
 8000280:	f105 0501 	add.w	r5, r5, #1

    	subs 	r2, 1
 8000284:	3a01      	subs	r2, #1
    	bne 	asm_filtroVentana10_bucle
 8000286:	d1ed      	bne.n	8000264 <asm_filtroVentana10_bucle>

08000288 <asm_filtroVentana10_salir>:

    asm_filtroVentana10_salir:
    	pop 	{r4-r6}
 8000288:	bc70      	pop	{r4, r5, r6}
    	bx 		lr
 800028a:	4770      	bx	lr

0800028c <asm_pack32to16>:
@	r3: acumulador de los valores a promediar
@   r4: valor de cada elemento de vectorIn

.thumb_func
    asm_pack32to16:
    	push 	{r4}
 800028c:	b410      	push	{r4}

		cmp 	r0, #0				@ vectorIn != NULL
 800028e:	2800      	cmp	r0, #0
        beq 	asm_pack32to16_salir
 8000290:	d009      	beq.n	80002a6 <asm_pack32to16_salir>
        cmp 	r1, #0				@ vectorOut != NULL
 8000292:	2900      	cmp	r1, #0
        beq 	asm_pack32to16_salir
 8000294:	d007      	beq.n	80002a6 <asm_pack32to16_salir>

08000296 <asm_pack32to16_bucle>:

    asm_pack32to16_bucle:
    	ldr		r4, [r0], #4	@ Carga elementos de 32 bits
 8000296:	f850 4b04 	ldr.w	r4, [r0], #4

    	asr	r4, r4, #16			@ Desplazamiento aritmético a la derecha, para
 800029a:	ea4f 4424 	mov.w	r4, r4, asr #16
    							@ mantener el signo

    	strh	r4, [r1], #2	@ Guarda elementos de 16 bits
 800029e:	f821 4b02 	strh.w	r4, [r1], #2

    	subs 	r2, 1
 80002a2:	3a01      	subs	r2, #1
    	bne 	asm_pack32to16_bucle
 80002a4:	d1f7      	bne.n	8000296 <asm_pack32to16_bucle>

080002a6 <asm_pack32to16_salir>:

    asm_pack32to16_salir:
    	pop 	{r4}
 80002a6:	bc10      	pop	{r4}
    	bx 		lr
 80002a8:	4770      	bx	lr

080002aa <asm_max>:
@   r4: valor de cada elemento de vectorIn
@	r5: índice de cada elemento de vectorIn

.thumb_func
    asm_max:
    	push 	{r4-r5}
 80002aa:	b430      	push	{r4, r5}

    	movw	r2, #0			@ uint32_t max_idx = 0;
 80002ac:	f240 0200 	movw	r2, #0
    	movw	r5, #0			@ uint32_t i = 0
 80002b0:	f240 0500 	movw	r5, #0

		cmp 	r0, #0			@ vectorIn != NULL
 80002b4:	2800      	cmp	r0, #0
        beq 	asm_max_salir
 80002b6:	d00b      	beq.n	80002d0 <asm_max_salir>

        ldr		r3, [r0]		@ vectorIn[max_idx] con max_idx=0
 80002b8:	6803      	ldr	r3, [r0, #0]

080002ba <asm_max_bucle>:

    asm_max_bucle:
    	ldr		r4, [r0], #4	@ Carga elementos de 32 bits
 80002ba:	f850 4b04 	ldr.w	r4, [r0], #4

    	cmp		r4, r3			@ if(vectorIn[i] > vectorIn[max_idx])
 80002be:	429c      	cmp	r4, r3
    	itt		ge
 80002c0:	bfa4      	itt	ge
    	movge	r3, r4			@ Actualiza valor al máximo
 80002c2:	4623      	movge	r3, r4
    	movge	r2, r5			@ Actualiza el índice al del valor máximo
 80002c4:	462a      	movge	r2, r5

    	add		r5, #1			@ i++
 80002c6:	f105 0501 	add.w	r5, r5, #1

    	subs 	r1, 1			@ Equivaldría a i <longitud
 80002ca:	3901      	subs	r1, #1
    	bne 	asm_max_bucle
 80002cc:	d1f5      	bne.n	80002ba <asm_max_bucle>

    	mov 	r0, r2			@ Índice del mayor elemento para retornar
 80002ce:	4610      	mov	r0, r2

080002d0 <asm_max_salir>:

    asm_max_salir:
    	pop 	{r4-r5}
 80002d0:	bc30      	pop	{r4, r5}
    	bx 		lr
 80002d2:	4770      	bx	lr

080002d4 <asm_downsampleM>:
@	r4: registro auxiliar, valor de cada elemento de vectorIn
@	r5: índice para decimar cada N elementos

.thumb_func
    asm_downsampleM:
    	push 	{r4-r5}
 80002d4:	b430      	push	{r4, r5}

    	cmp 	r0, #0				@ vectorIn != NULL
 80002d6:	2800      	cmp	r0, #0
        beq 	asm_downsampleM_salir
 80002d8:	d00b      	beq.n	80002f2 <asm_downsampleM_salir>
        cmp 	r1, #0				@ vectorOut != NULL
 80002da:	2900      	cmp	r1, #0
        beq 	asm_downsampleM_salir
 80002dc:	d009      	beq.n	80002f2 <asm_downsampleM_salir>

        mov		r5, r3				@ R5 = N
 80002de:	461d      	mov	r5, r3

080002e0 <asm_downsampleM_bucle>:

    asm_downsampleM_bucle:
    	ldr		r4, [r0], #4
 80002e0:	f850 4b04 	ldr.w	r4, [r0], #4

		subs	r5, #1				@ R5--
 80002e4:	3d01      	subs	r5, #1
		ite		ne					@ Si R5 != 0
 80002e6:	bf14      	ite	ne
		strne 	r4, [r1], #4		@ Guarda el valor
 80002e8:	f841 4b04 	strne.w	r4, [r1], #4
		moveq	r5,r3				@ Si no, reinicia cuenta R5 = N
 80002ec:	461d      	moveq	r5, r3

    	subs 	r2, 1
 80002ee:	3a01      	subs	r2, #1
    	bne 	asm_downsampleM_bucle
 80002f0:	d1f6      	bne.n	80002e0 <asm_downsampleM_bucle>

080002f2 <asm_downsampleM_salir>:

    asm_downsampleM_salir:
    	pop 	{r4-r5}
 80002f2:	bc30      	pop	{r4, r5}
    	bx 		lr
 80002f4:	4770      	bx	lr

080002f6 <asm_invertir>:
@   r4: auxiliar para elementos del inicio
@	r5: auxiliar para elementos del final

.thumb_func
    asm_invertir:
    	push 	{r4-r5}
 80002f6:	b430      	push	{r4, r5}

    	movw	r2, #0			@ uint32_t elem_inicial = 0
 80002f8:	f240 0200 	movw	r2, #0
    	sub 	r1, #1			@ longitud - 1
 80002fc:	f1a1 0101 	sub.w	r1, r1, #1
    	mov		r3, r1			@ elem_final = longitud - 1
 8000300:	460b      	mov	r3, r1

		cmp 	r0, #0			@ vectorIn != NULL
 8000302:	2800      	cmp	r0, #0
        beq 	asm_invertir_salir
 8000304:	d00d      	beq.n	8000322 <asm_invertir_salir>

08000306 <asm_invertir_bucle>:

    asm_invertir_bucle:
    	ldrh	r4, [r0, r2, lsl #1]	@ vector[elem_inicial]
 8000306:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
    	ldrh	r5, [r0, r3, lsl #1]	@ vector[elem_final]
 800030a:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
										@ Los shift se necesitan para moverse de
										@ a 2 bytes
		strh	r5, [r0, r2, lsl #1]	@ vector[elem_inicial] = vector[elem_final]
 800030e:	f820 5012 	strh.w	r5, [r0, r2, lsl #1]
		strh	r4, [r0, r3, lsl #1]	@ vector[elem_final] = vector[elem_inicial]
 8000312:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]

		add		r2, #1			@ elem_inicial++
 8000316:	f102 0201 	add.w	r2, r2, #1
		sub		r3, #1			@ elem_final--
 800031a:	f1a3 0301 	sub.w	r3, r3, #1

		cmp 	r2, r3			@ elem_inicial < elem_final
 800031e:	429a      	cmp	r2, r3
		blt		asm_invertir_bucle
 8000320:	dbf1      	blt.n	8000306 <asm_invertir_bucle>

08000322 <asm_invertir_salir>:

    asm_invertir_salir:
    	pop 	{r4-r5}
 8000322:	bc30      	pop	{r4, r5}
    	bx 		lr
 8000324:	4770      	bx	lr

08000326 <asm_eco>:
@	r3: índice para recorrer los vectores
@   r4: valor de cada elemento de vectorIn

.thumb_func
    asm_eco:
    	push 	{r4-r5}
 8000326:	b430      	push	{r4, r5}

		cmp 	r0, #0				@ vectorIn != NULL
 8000328:	2800      	cmp	r0, #0
        beq 	asm_eco_salir
 800032a:	d016      	beq.n	800035a <asm_eco_salir>
        cmp 	r1, #0				@ vectorOut != NULL
 800032c:	2900      	cmp	r1, #0
        beq 	asm_eco_salir
 800032e:	d014      	beq.n	800035a <asm_eco_salir>

		movw	r3, #882			@ Equivalente a uint32_t i=0
 8000330:	f240 3372 	movw	r3, #882	; 0x372

08000334 <asm_eco_bucle1>:
    asm_eco_bucle1:
    	ldrh	r4, [r0], #2		@ vectorIn[i]
 8000334:	f830 4b02 	ldrh.w	r4, [r0], #2
    	strh	r4, [r1], #2		@ vectorOut[i] = vectorIn[i];
 8000338:	f821 4b02 	strh.w	r4, [r1], #2

    	subs 	r3, 1				@ i++
 800033c:	3b01      	subs	r3, #1
    	bne 	asm_eco_bucle1		@ @ i<882
 800033e:	d1f9      	bne.n	8000334 <asm_eco_bucle1>

    	sub		r2, #882			@ Equivalente a uint32_t i = 882
 8000340:	f2a2 3272 	subw	r2, r2, #882	; 0x372
    	ldr		r3, =-1766			@
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <asm_sum+0x4>)

08000346 <asm_eco_bucle2>:
    asm_eco_bucle2:
    	ldrh	r4, [r0], #2		@ vectorIn[i]
 8000346:	f830 4b02 	ldrh.w	r4, [r0], #2

    	ldrh	r5, [r0, r3]		@ vector[i-882]
 800034a:	5ac5      	ldrh	r5, [r0, r3]
    	asr		r5, r5, #1			@ (vectorIn[i-882] / 2)
 800034c:	ea4f 0565 	mov.w	r5, r5, asr #1
    	add		r4, r4, r5			@ vectorIn[i] + (vectorIn[i-882] / 2)
 8000350:	442c      	add	r4, r5

    	strh	r4, [r1], #2		@ vectorOut[i] = vectorIn[i] + (vectorIn[i-882] / 2);
 8000352:	f821 4b02 	strh.w	r4, [r1], #2

    	subs 	r2, 1
 8000356:	3a01      	subs	r2, #1
    	bne 	asm_eco_bucle2
 8000358:	d1f5      	bne.n	8000346 <asm_eco_bucle2>

0800035a <asm_eco_salir>:

    asm_eco_salir:
    	pop 	{r4-r5}
 800035a:	bc30      	pop	{r4, r5}
    	bx 		lr
 800035c:	4770      	bx	lr

0800035e <asm_eco_simd>:
@	r3: índice para recorrer los vectores
@   r4: valor de cada elemento de vectorIn

.thumb_func
    asm_eco_simd:
    	push 	{r4-r6}
 800035e:	b470      	push	{r4, r5, r6}

		cmp 	r0, #0				@ vectorIn != NULL
 8000360:	2800      	cmp	r0, #0
        beq 	asm_eco_simd_salir
 8000362:	d019      	beq.n	8000398 <asm_eco_simd_salir>
        cmp 	r1, #0				@ vectorOut != NULL
 8000364:	2900      	cmp	r1, #0
        beq 	asm_eco_simd_salir
 8000366:	d017      	beq.n	8000398 <asm_eco_simd_salir>

		movw	r3, #882			@ Equivalente a uint32_t i=0. Toma los datos de a 4
 8000368:	f240 3372 	movw	r3, #882	; 0x372

0800036c <asm_eco_simd_bucle1>:
    asm_eco_simd_bucle1:			@ bytes (2 valores de 16 bits) por lo que se cuenta la mitad
    	ldr		r4, [r0], #4		@ vectorIn[i]
 800036c:	f850 4b04 	ldr.w	r4, [r0], #4
    	str		r4, [r1], #4		@ vectorOut[i] = vectorIn[i];
 8000370:	f841 4b04 	str.w	r4, [r1], #4

    	subs 	r3, 2				@ i++
 8000374:	3b02      	subs	r3, #2
    	bne 	asm_eco_simd_bucle1	@ @ i<882
 8000376:	d1f9      	bne.n	800036c <asm_eco_simd_bucle1>

    	sub		r2, #441			@ Equivalente a uint32_t i = 882 / 2
 8000378:	f2a2 12b9 	subw	r2, r2, #441	; 0x1b9
    	ldr		r3, =-1768			@ Equivalente a i-882
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <asm_sum+0x8>)
    	movw	r6, #0
 800037e:	f240 0600 	movw	r6, #0

08000382 <asm_eco_simd_bucle2>:
    asm_eco_simd_bucle2:
    	ldr		r4, [r0], #4		@ vectorIn[i]
 8000382:	f850 4b04 	ldr.w	r4, [r0], #4
    	ldr		r5, [r0, r3]		@ vector[i-882]
 8000386:	58c5      	ldr	r5, [r0, r3]

		shadd16	r5, r5, r6			@ (vectorIn[i-882] / 2)
 8000388:	fa95 f526 	shadd16	r5, r5, r6
    	sadd16	r4, r4, r5			@ vectorIn[i] + (vectorIn[i-882] / 2)
 800038c:	fa94 f405 	sadd16	r4, r4, r5

    	str	r4, [r1], #4			@ vectorOut[i] = vectorIn[i] + (vectorIn[i-882] / 2);
 8000390:	f841 4b04 	str.w	r4, [r1], #4

    	subs 	r2, 1
 8000394:	3a01      	subs	r2, #1
    	bne 	asm_eco_simd_bucle2
 8000396:	d1f4      	bne.n	8000382 <asm_eco_simd_bucle2>

08000398 <asm_eco_simd_salir>:

    asm_eco_simd_salir:
    	pop 	{r4-r6}
 8000398:	bc70      	pop	{r4, r5, r6}
    	bx 		lr
 800039a:	4770      	bx	lr

0800039c <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 800039c:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800039e:	4770      	bx	lr
    	ldr		r3, =-1766			@
 80003a0:	fffff91a 	.word	0xfffff91a
    	ldr		r3, =-1768			@ Equivalente a i-882
 80003a4:	fffff918 	.word	0xfffff918

080003a8 <strlen>:
 80003a8:	4603      	mov	r3, r0
 80003aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d1fb      	bne.n	80003aa <strlen+0x2>
 80003b2:	1a18      	subs	r0, r3, r0
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr

080003b8 <__aeabi_uldivmod>:
 80003b8:	b953      	cbnz	r3, 80003d0 <__aeabi_uldivmod+0x18>
 80003ba:	b94a      	cbnz	r2, 80003d0 <__aeabi_uldivmod+0x18>
 80003bc:	2900      	cmp	r1, #0
 80003be:	bf08      	it	eq
 80003c0:	2800      	cmpeq	r0, #0
 80003c2:	bf1c      	itt	ne
 80003c4:	f04f 31ff 	movne.w	r1, #4294967295
 80003c8:	f04f 30ff 	movne.w	r0, #4294967295
 80003cc:	f000 b974 	b.w	80006b8 <__aeabi_idiv0>
 80003d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d8:	f000 f806 	bl	80003e8 <__udivmoddi4>
 80003dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e4:	b004      	add	sp, #16
 80003e6:	4770      	bx	lr

080003e8 <__udivmoddi4>:
 80003e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003ec:	9d08      	ldr	r5, [sp, #32]
 80003ee:	4604      	mov	r4, r0
 80003f0:	468e      	mov	lr, r1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d14d      	bne.n	8000492 <__udivmoddi4+0xaa>
 80003f6:	428a      	cmp	r2, r1
 80003f8:	4694      	mov	ip, r2
 80003fa:	d969      	bls.n	80004d0 <__udivmoddi4+0xe8>
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	b152      	cbz	r2, 8000418 <__udivmoddi4+0x30>
 8000402:	fa01 f302 	lsl.w	r3, r1, r2
 8000406:	f1c2 0120 	rsb	r1, r2, #32
 800040a:	fa20 f101 	lsr.w	r1, r0, r1
 800040e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000412:	ea41 0e03 	orr.w	lr, r1, r3
 8000416:	4094      	lsls	r4, r2
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	0c21      	lsrs	r1, r4, #16
 800041e:	fbbe f6f8 	udiv	r6, lr, r8
 8000422:	fa1f f78c 	uxth.w	r7, ip
 8000426:	fb08 e316 	mls	r3, r8, r6, lr
 800042a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800042e:	fb06 f107 	mul.w	r1, r6, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d90a      	bls.n	800044c <__udivmoddi4+0x64>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f106 30ff 	add.w	r0, r6, #4294967295
 800043e:	f080 811f 	bcs.w	8000680 <__udivmoddi4+0x298>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 811c 	bls.w	8000680 <__udivmoddi4+0x298>
 8000448:	3e02      	subs	r6, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3310 	mls	r3, r8, r0, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb00 f707 	mul.w	r7, r0, r7
 8000460:	42a7      	cmp	r7, r4
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x92>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 33ff 	add.w	r3, r0, #4294967295
 800046c:	f080 810a 	bcs.w	8000684 <__udivmoddi4+0x29c>
 8000470:	42a7      	cmp	r7, r4
 8000472:	f240 8107 	bls.w	8000684 <__udivmoddi4+0x29c>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800047e:	1be4      	subs	r4, r4, r7
 8000480:	2600      	movs	r6, #0
 8000482:	b11d      	cbz	r5, 800048c <__udivmoddi4+0xa4>
 8000484:	40d4      	lsrs	r4, r2
 8000486:	2300      	movs	r3, #0
 8000488:	e9c5 4300 	strd	r4, r3, [r5]
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	428b      	cmp	r3, r1
 8000494:	d909      	bls.n	80004aa <__udivmoddi4+0xc2>
 8000496:	2d00      	cmp	r5, #0
 8000498:	f000 80ef 	beq.w	800067a <__udivmoddi4+0x292>
 800049c:	2600      	movs	r6, #0
 800049e:	e9c5 0100 	strd	r0, r1, [r5]
 80004a2:	4630      	mov	r0, r6
 80004a4:	4631      	mov	r1, r6
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	fab3 f683 	clz	r6, r3
 80004ae:	2e00      	cmp	r6, #0
 80004b0:	d14a      	bne.n	8000548 <__udivmoddi4+0x160>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xd4>
 80004b6:	4282      	cmp	r2, r0
 80004b8:	f200 80f9 	bhi.w	80006ae <__udivmoddi4+0x2c6>
 80004bc:	1a84      	subs	r4, r0, r2
 80004be:	eb61 0303 	sbc.w	r3, r1, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	469e      	mov	lr, r3
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d0e0      	beq.n	800048c <__udivmoddi4+0xa4>
 80004ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ce:	e7dd      	b.n	800048c <__udivmoddi4+0xa4>
 80004d0:	b902      	cbnz	r2, 80004d4 <__udivmoddi4+0xec>
 80004d2:	deff      	udf	#255	; 0xff
 80004d4:	fab2 f282 	clz	r2, r2
 80004d8:	2a00      	cmp	r2, #0
 80004da:	f040 8092 	bne.w	8000602 <__udivmoddi4+0x21a>
 80004de:	eba1 010c 	sub.w	r1, r1, ip
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2601      	movs	r6, #1
 80004ec:	0c20      	lsrs	r0, r4, #16
 80004ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80004f2:	fb07 1113 	mls	r1, r7, r3, r1
 80004f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fa:	fb0e f003 	mul.w	r0, lr, r3
 80004fe:	4288      	cmp	r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x12c>
 8000502:	eb1c 0101 	adds.w	r1, ip, r1
 8000506:	f103 38ff 	add.w	r8, r3, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x12a>
 800050c:	4288      	cmp	r0, r1
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2c0>
 8000512:	4643      	mov	r3, r8
 8000514:	1a09      	subs	r1, r1, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb1 f0f7 	udiv	r0, r1, r7
 800051c:	fb07 1110 	mls	r1, r7, r0, r1
 8000520:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x156>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 31ff 	add.w	r1, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x154>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2ca>
 800053c:	4608      	mov	r0, r1
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x9a>
 8000548:	f1c6 0720 	rsb	r7, r6, #32
 800054c:	40b3      	lsls	r3, r6
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa20 f407 	lsr.w	r4, r0, r7
 800055a:	fa01 f306 	lsl.w	r3, r1, r6
 800055e:	431c      	orrs	r4, r3
 8000560:	40f9      	lsrs	r1, r7
 8000562:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000566:	fa00 f306 	lsl.w	r3, r0, r6
 800056a:	fbb1 f8f9 	udiv	r8, r1, r9
 800056e:	0c20      	lsrs	r0, r4, #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fb09 1118 	mls	r1, r9, r8, r1
 8000578:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800057c:	fb08 f00e 	mul.w	r0, r8, lr
 8000580:	4288      	cmp	r0, r1
 8000582:	fa02 f206 	lsl.w	r2, r2, r6
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b8>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2bc>
 8000594:	4288      	cmp	r0, r1
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2bc>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4461      	add	r1, ip
 80005a0:	1a09      	subs	r1, r1, r0
 80005a2:	b2a4      	uxth	r4, r4
 80005a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a8:	fb09 1110 	mls	r1, r9, r0, r1
 80005ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80005b4:	458e      	cmp	lr, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1e2>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2b4>
 80005c2:	458e      	cmp	lr, r1
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2b4>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ce:	fba0 9402 	umull	r9, r4, r0, r2
 80005d2:	eba1 010e 	sub.w	r1, r1, lr
 80005d6:	42a1      	cmp	r1, r4
 80005d8:	46c8      	mov	r8, r9
 80005da:	46a6      	mov	lr, r4
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x2a4>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x2a0>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x212>
 80005e2:	ebb3 0208 	subs.w	r2, r3, r8
 80005e6:	eb61 010e 	sbc.w	r1, r1, lr
 80005ea:	fa01 f707 	lsl.w	r7, r1, r7
 80005ee:	fa22 f306 	lsr.w	r3, r2, r6
 80005f2:	40f1      	lsrs	r1, r6
 80005f4:	431f      	orrs	r7, r3
 80005f6:	e9c5 7100 	strd	r7, r1, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	40d8      	lsrs	r0, r3
 8000608:	fa0c fc02 	lsl.w	ip, ip, r2
 800060c:	fa21 f303 	lsr.w	r3, r1, r3
 8000610:	4091      	lsls	r1, r2
 8000612:	4301      	orrs	r1, r0
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000620:	fb07 3610 	mls	r6, r7, r0, r3
 8000624:	0c0b      	lsrs	r3, r1, #16
 8000626:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800062a:	fb00 f60e 	mul.w	r6, r0, lr
 800062e:	429e      	cmp	r6, r3
 8000630:	fa04 f402 	lsl.w	r4, r4, r2
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x260>
 8000636:	eb1c 0303 	adds.w	r3, ip, r3
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b8>
 8000640:	429e      	cmp	r6, r3
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b8>
 8000644:	3802      	subs	r0, #2
 8000646:	4463      	add	r3, ip
 8000648:	1b9b      	subs	r3, r3, r6
 800064a:	b289      	uxth	r1, r1
 800064c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000650:	fb07 3316 	mls	r3, r7, r6, r3
 8000654:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000658:	fb06 f30e 	mul.w	r3, r6, lr
 800065c:	428b      	cmp	r3, r1
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x28a>
 8000660:	eb1c 0101 	adds.w	r1, ip, r1
 8000664:	f106 38ff 	add.w	r8, r6, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2b0>
 800066a:	428b      	cmp	r3, r1
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2b0>
 800066e:	3e02      	subs	r6, #2
 8000670:	4461      	add	r1, ip
 8000672:	1ac9      	subs	r1, r1, r3
 8000674:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0x104>
 800067a:	462e      	mov	r6, r5
 800067c:	4628      	mov	r0, r5
 800067e:	e705      	b.n	800048c <__udivmoddi4+0xa4>
 8000680:	4606      	mov	r6, r0
 8000682:	e6e3      	b.n	800044c <__udivmoddi4+0x64>
 8000684:	4618      	mov	r0, r3
 8000686:	e6f8      	b.n	800047a <__udivmoddi4+0x92>
 8000688:	454b      	cmp	r3, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f8>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000694:	3801      	subs	r0, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f8>
 8000698:	4646      	mov	r6, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x28a>
 800069c:	4620      	mov	r0, r4
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1e2>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x260>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b8>
 80006a8:	3b02      	subs	r3, #2
 80006aa:	4461      	add	r1, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x12c>
 80006ae:	4630      	mov	r0, r6
 80006b0:	e709      	b.n	80004c6 <__udivmoddi4+0xde>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x156>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <PrivilegiosSVC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006c2:	f3ef 8314 	mrs	r3, CONTROL
 80006c6:	607b      	str	r3, [r7, #4]
  return(result);
 80006c8:	687b      	ldr	r3, [r7, #4]
	// bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
	// bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
	//        Recordar que este valor solo se usa en modo Thread. Las
	//        interrupciones siempre se ejecutan en modo Handler con total
	//        privilegio.
	uint32_t x = __get_CONTROL();
 80006ca:	61fb      	str	r3, [r7, #28]

	// Actividad de debug: Ver registro "control" y valor de variable "x".
	//__BKPT (0);

	x |= 1;
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f383 8814 	msr	CONTROL, r3
}
 80006de:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006e0:	f3ef 8314 	mrs	r3, CONTROL
 80006e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80006e6:	68fb      	ldr	r3, [r7, #12]
	// bit 0 a modo No privilegiado.
	__set_CONTROL(x);

	// En este punto se estaria ejecutando en modo No privilegiado.
	// Lectura del registro "control" para confirmar.
	x = __get_CONTROL();
 80006e8:	61fb      	str	r3, [r7, #28]

	// Actividad de debug: Ver registro "control" y valor de variable "x".
	//__BKPT (0);

	x &= ~1u;
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	f023 0301 	bic.w	r3, r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	f383 8814 	msr	CONTROL, r3
}
 80006fc:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006fe:	f3ef 8314 	mrs	r3, CONTROL
 8000702:	617b      	str	r3, [r7, #20]
  return(result);
 8000704:	697b      	ldr	r3, [r7, #20]
	// Se intenta volver a modo Privilegiado (bit 0, valor 0).
	__set_CONTROL(x);

	// Confirma que esta operacion es ignorada por estar ejecutandose en modo
	// Thread no privilegiado.
	x = __get_CONTROL();
 8000706:	61fb      	str	r3, [r7, #28]
	// Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
	// utilizando la instruccion "svc".
	// No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
	// es necesario implementar una funcion en assembler. Ver el archivo
	// asm_func.S.
	asm_svc();
 8000708:	f7ff fd70 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800070c:	f3ef 8314 	mrs	r3, CONTROL
 8000710:	61bb      	str	r3, [r7, #24]
  return(result);
 8000712:	69bb      	ldr	r3, [r7, #24]

	// El sistema operativo (el handler de SVC) deberia haber devuelto el modo
	// de ejecucion de Thread a privilegiado (bit 0 en valor 0).
	x = __get_CONTROL();
 8000714:	61fb      	str	r3, [r7, #28]

	// Fin del ejemplo de SVC
}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <zeros>:

/*---------- Funciones para resolución de ejercicios en C ----------*/

// Ejercicio 1 en C - Definición de función
void zeros(uint32_t *vector, uint32_t longitud) {
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]

	memset(vector, 0, longitud * sizeof(*vector));
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	461a      	mov	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f003 fe6f 	bl	8004414 <memset>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <productoEscalar32>:

// Ejercicio 2 en C - Definición de función
void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut,
		uint32_t longitud, uint32_t escalar) {
 800073e:	b480      	push	{r7}
 8000740:	b087      	sub	sp, #28
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	603b      	str	r3, [r7, #0]

	/** Chequea que los punteros estén inicializados
	 */
	if (vectorIn != NULL && vectorOut != NULL) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d019      	beq.n	8000786 <productoEscalar32+0x48>
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d016      	beq.n	8000786 <productoEscalar32+0x48>

		/** Multiplica un arreglo por un escalar y guarda el
		 * resultado en otro arreglo de igual tamaño
		 * */
		for (int32_t i = 0; i < longitud; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e00f      	b.n	800077e <productoEscalar32+0x40>

			vectorOut[i] = vectorIn[i] * escalar;
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	440b      	add	r3, r1
 8000770:	6839      	ldr	r1, [r7, #0]
 8000772:	fb01 f202 	mul.w	r2, r1, r2
 8000776:	601a      	str	r2, [r3, #0]
		for (int32_t i = 0; i < longitud; i++) {
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3301      	adds	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	429a      	cmp	r2, r3
 8000784:	d8eb      	bhi.n	800075e <productoEscalar32+0x20>
		}
	}
}
 8000786:	bf00      	nop
 8000788:	371c      	adds	r7, #28
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <productoEscalar16>:

// Ejercicio 3 en C - Definición de función
void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut,
		uint32_t longitud, uint16_t escalar) {
 8000792:	b480      	push	{r7}
 8000794:	b087      	sub	sp, #28
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	807b      	strh	r3, [r7, #2]

	/** Chequea que los punteros estén inicializados
	 */
	if (vectorIn != NULL && vectorOut != NULL) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d01a      	beq.n	80007dc <productoEscalar16+0x4a>
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d017      	beq.n	80007dc <productoEscalar16+0x4a>

		/** Multiplica un arreglo por un escalar y guarda el
		 * resultado en otro arreglo de igual tamaño
		 * */
		for (int32_t i = 0; i < longitud; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e010      	b.n	80007d4 <productoEscalar16+0x42>
			vectorOut[i] = vectorIn[i] * escalar;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	881a      	ldrh	r2, [r3, #0]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	440b      	add	r3, r1
 80007c4:	8879      	ldrh	r1, [r7, #2]
 80007c6:	fb11 f202 	smulbb	r2, r1, r2
 80007ca:	b292      	uxth	r2, r2
 80007cc:	801a      	strh	r2, [r3, #0]
		for (int32_t i = 0; i < longitud; i++) {
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d8ea      	bhi.n	80007b2 <productoEscalar16+0x20>
		}
	}
}
 80007dc:	bf00      	nop
 80007de:	371c      	adds	r7, #28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <productoEscalar12>:
 * @brief Mayor valor que entra en un número de 12 bits
 */
#define MAX_UINT12 0x0FFF

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut,
		uint32_t longitud, uint16_t escalar) {
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	807b      	strh	r3, [r7, #2]

	/** Chequea que los punteros estén inicializados
	 */
	if (vectorIn != NULL && vectorOut != NULL) {
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d031      	beq.n	8000860 <productoEscalar12+0x78>
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d02e      	beq.n	8000860 <productoEscalar12+0x78>

		/** Valor a partir del cual se produce desborde al multiplicar
		 *  por "escalar"
		 */
		uint16_t max_mult = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	827b      	strh	r3, [r7, #18]

		if (escalar != 0) {
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d029      	beq.n	8000860 <productoEscalar12+0x78>
			/** Cualquier número multiplicado por un valor mayor que
			 * max_mult va a producir un desborde
			 */
			max_mult = MAX_UINT12 / escalar;
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000812:	fb92 f3f3 	sdiv	r3, r2, r3
 8000816:	827b      	strh	r3, [r7, #18]

			for (int32_t i = 0; i < longitud; i++) {
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e01c      	b.n	8000858 <productoEscalar12+0x70>

				/** Si se  el valor en vectorIn[i] producirá desborde,
				 *  pone como resultado el valor máximo en 12 bits (saturación)
				 */
				vectorOut[i] =
						vectorIn[i] < max_mult ?
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4413      	add	r3, r2
 8000826:	881b      	ldrh	r3, [r3, #0]
				vectorOut[i] =
 8000828:	8a7a      	ldrh	r2, [r7, #18]
 800082a:	429a      	cmp	r2, r3
 800082c:	d909      	bls.n	8000842 <productoEscalar12+0x5a>
								vectorIn[i] * escalar : MAX_UINT12;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	881b      	ldrh	r3, [r3, #0]
				vectorOut[i] =
 8000838:	887a      	ldrh	r2, [r7, #2]
 800083a:	fb12 f303 	smulbb	r3, r2, r3
 800083e:	b299      	uxth	r1, r3
 8000840:	e001      	b.n	8000846 <productoEscalar12+0x5e>
 8000842:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	801a      	strh	r2, [r3, #0]
			for (int32_t i = 0; i < longitud; i++) {
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	d8de      	bhi.n	800081e <productoEscalar12+0x36>
			}
		}
	}
}
 8000860:	bf00      	nop
 8000862:	371c      	adds	r7, #28
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <filtroVentana10>:

// Ejercicio 5 en C - Definición de función
void filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut,
		uint32_t longitudVectorIn) {
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]

	uint16_t acumulador = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	83fb      	strh	r3, [r7, #30]

	/** Parametrizar el tamaño de ventana permite hacer pruebas
	 * con ventanas de pequeños tamaños
	 */
	uint8_t tam_ventana = 10;
 800087c:	230a      	movs	r3, #10
 800087e:	75fb      	strb	r3, [r7, #23]

	/** Chequea que los punteros estén inicializados
	 */
	if (vectorIn != NULL && vectorOut != NULL) {
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d02c      	beq.n	80008e0 <filtroVentana10+0x74>
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d029      	beq.n	80008e0 <filtroVentana10+0x74>
		 *  que queda fuera de la ventana
		 *
		 *  El proceso se detiene cuando el índice de la ventana llega al tamaño
		 *  del vector (la ventana no está centrada)
		 */
		for (uint32_t i = 0; i < longitudVectorIn; i++) {
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	e022      	b.n	80008d8 <filtroVentana10+0x6c>

			acumulador += vectorIn[i];	// Agregar una nueva muestra
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	4413      	add	r3, r2
 800089a:	881a      	ldrh	r2, [r3, #0]
 800089c:	8bfb      	ldrh	r3, [r7, #30]
 800089e:	4413      	add	r3, r2
 80008a0:	83fb      	strh	r3, [r7, #30]

			if (i >= tam_ventana) {			// A partir del tamaño de ventana
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d309      	bcc.n	80008be <filtroVentana10+0x52>
				acumulador -= vectorIn[i - tam_ventana];// al avanzar resta la muestra que sobra
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	8bfa      	ldrh	r2, [r7, #30]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	83fb      	strh	r3, [r7, #30]
			}

			vectorOut[i] = acumulador / tam_ventana;// Guarda el promedio actualizado
 80008be:	8bfa      	ldrh	r2, [r7, #30]
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	fb92 f1f3 	sdiv	r1, r2, r3
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	b28a      	uxth	r2, r1
 80008d0:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < longitudVectorIn; i++) {
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	3301      	adds	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d3d8      	bcc.n	8000892 <filtroVentana10+0x26>
		}
	}
}
 80008e0:	bf00      	nop
 80008e2:	3724      	adds	r7, #36	; 0x24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <pack32to16>:

// Ejercicio 6 en C - Definición de función
void pack32to16(int32_t *vectorIn, int16_t *vectorOut, uint32_t longitud) {
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
	if (vectorIn != NULL && vectorOut != NULL) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d018      	beq.n	8000930 <pack32to16+0x44>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d015      	beq.n	8000930 <pack32to16+0x44>
		for (uint32_t i = 0; i < longitud; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e00e      	b.n	8000928 <pack32to16+0x3c>
			vectorOut[i] = (int16_t) (vectorIn[i] >> 16);
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	1419      	asrs	r1, r3, #16
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	b20a      	sxth	r2, r1
 8000920:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < longitud; i++) {
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	d3ec      	bcc.n	800090a <pack32to16+0x1e>
		}
	}
}
 8000930:	bf00      	nop
 8000932:	371c      	adds	r7, #28
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <max>:

// Ejercicio 7 en C - Definición de función
int32_t max(int32_t *vectorIn, uint32_t longitud) {
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	uint32_t max_idx = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]

	if (vectorIn != NULL) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d017      	beq.n	8000980 <max+0x44>
		for (uint32_t i = 0; i < longitud; i++) {
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e010      	b.n	8000978 <max+0x3c>
			if (vectorIn[i] > vectorIn[max_idx])
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	440b      	add	r3, r1
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	dd01      	ble.n	8000972 <max+0x36>
				max_idx = i;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	60fb      	str	r3, [r7, #12]
		for (uint32_t i = 0; i < longitud; i++) {
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	3301      	adds	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	429a      	cmp	r2, r3
 800097e:	d3ea      	bcc.n	8000956 <max+0x1a>
		}
	}
	return max_idx;
 8000980:	68fb      	ldr	r3, [r7, #12]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <downsampleM>:

// Ejercicio 8 en C - Definición de función
void downsampleM(int32_t *vectorIn, int32_t *vectorOut, uint32_t longitud,
		uint32_t N) {
 800098e:	b480      	push	{r7}
 8000990:	b087      	sub	sp, #28
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	603b      	str	r3, [r7, #0]
	uint32_t j = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]

	if (vectorIn != NULL && vectorOut != NULL) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d023      	beq.n	80009ee <downsampleM+0x60>
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d020      	beq.n	80009ee <downsampleM+0x60>
		for (uint32_t i = 0; i < longitud; i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	e019      	b.n	80009e6 <downsampleM+0x58>
			if (i % N != 0) {
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	fb01 f202 	mul.w	r2, r1, r2
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00c      	beq.n	80009e0 <downsampleM+0x52>
				vectorOut[j] = vectorIn[i];
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	441a      	add	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	440b      	add	r3, r1
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	601a      	str	r2, [r3, #0]
				j++;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
		for (uint32_t i = 0; i < longitud; i++) {
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	3301      	adds	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3e1      	bcc.n	80009b2 <downsampleM+0x24>
			}
		}
	}
}
 80009ee:	bf00      	nop
 80009f0:	371c      	adds	r7, #28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <invertir>:

// Ejercicio 9 en C en C - Definición de función
void invertir(uint16_t *vector, uint32_t longitud) {
 80009fa:	b480      	push	{r7}
 80009fc:	b087      	sub	sp, #28
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
	uint16_t auxiliar = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	81fb      	strh	r3, [r7, #14]

	/** Revierte los elementos del vector recorriéndolo linealmente y
	 *  utilizando una variable auxiliar
	 */
	if (vector != NULL) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d025      	beq.n	8000a5a <invertir+0x60>
		for (uint32_t elem_inicial = 0, elem_final = longitud - 1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	e01b      	b.n	8000a52 <invertir+0x58>
				elem_inicial < elem_final; elem_inicial++, elem_final--) {

			auxiliar = vector[elem_inicial];
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	81fb      	strh	r3, [r7, #14]
			vector[elem_inicial] = vector[elem_final];
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	441a      	add	r2, r3
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	440b      	add	r3, r1
 8000a36:	8812      	ldrh	r2, [r2, #0]
 8000a38:	801a      	strh	r2, [r3, #0]
			vector[elem_final] = auxiliar;
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	89fa      	ldrh	r2, [r7, #14]
 8000a44:	801a      	strh	r2, [r3, #0]
				elem_inicial < elem_final; elem_inicial++, elem_final--) {
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
		for (uint32_t elem_inicial = 0, elem_final = longitud - 1;
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3df      	bcc.n	8000a1a <invertir+0x20>

		}
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	371c      	adds	r7, #28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <eco>:

// Ejercicio 10 en C en C - Definición de función
void eco(int16_t *vectorIn, int16_t *vectorOut, uint32_t longitud){
 8000a66:	b480      	push	{r7}
 8000a68:	b087      	sub	sp, #28
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	 * v_out[i] = vin[i]  para i < 882
	 *
	 * vout[i] = vin[i] + 1/2 * vin[i-882] para 882 <= i <4096
	 *
		 */
	if (vectorIn != NULL && vectorOut != NULL) {
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d041      	beq.n	8000afc <eco+0x96>
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d03e      	beq.n	8000afc <eco+0x96>
		for(uint32_t i=0; i<882; i++){
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e00d      	b.n	8000aa0 <eco+0x3a>
			vectorOut[i] = vectorIn[i];
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	441a      	add	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	440b      	add	r3, r1
 8000a94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a98:	801a      	strh	r2, [r3, #0]
		for(uint32_t i=0; i<882; i++){
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f240 3271 	movw	r2, #881	; 0x371
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d9ec      	bls.n	8000a84 <eco+0x1e>
		}
		for(uint32_t i = 882; i < longitud; i++){
 8000aaa:	f240 3372 	movw	r3, #882	; 0x372
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	e020      	b.n	8000af4 <eco+0x8e>
			vectorOut[i] = vectorIn[i] + (vectorIn[i-882] / 2);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4413      	add	r3, r2
 8000aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	f2a3 3372 	subw	r3, r3, #882	; 0x372
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	68f9      	ldr	r1, [r7, #12]
 8000ace:	440b      	add	r3, r1
 8000ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad4:	0fd9      	lsrs	r1, r3, #31
 8000ad6:	440b      	add	r3, r1
 8000ad8:	105b      	asrs	r3, r3, #1
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	b299      	uxth	r1, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b20a      	sxth	r2, r1
 8000aec:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 882; i < longitud; i++){
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	3301      	adds	r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d3da      	bcc.n	8000ab2 <eco+0x4c>
		}
	}
}
 8000afc:	bf00      	nop
 8000afe:	371c      	adds	r7, #28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <uartsendString>:

// Ejercicio final - Función de comunicación sencilla
void uartsendString(uint8_t *pstring) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	uint8_t buff_size;

	if (pstring != NULL) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00c      	beq.n	8000b30 <uartsendString+0x28>
		buff_size = strlen((char*) pstring);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fc46 	bl	80003a8 <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart3, pstring, buff_size, 0xffff);
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <uartsendString+0x30>)
 8000b2c:	f002 fdbd 	bl	80036aa <HAL_UART_Transmit>
	}
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000250 	.word	0x20000250

08000b3c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b40:	f5ad 4d43 	sub.w	sp, sp, #49920	; 0xc300
 8000b44:	b0ae      	sub	sp, #184	; 0xb8
 8000b46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b48:	f001 f958 	bl	8001dfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b4c:	f000 fd88 	bl	8001660 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	// Activa contador de ciclos (iniciar una sola vez)
	DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 8000b50:	4bd2      	ldr	r3, [pc, #840]	; (8000e9c <main+0x360>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4ad1      	ldr	r2, [pc, #836]	; (8000e9c <main+0x360>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b5c:	f000 fe90 	bl	8001880 <MX_GPIO_Init>
	MX_ETH_Init();
 8000b60:	f000 fde8 	bl	8001734 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000b64:	f000 fe34 	bl	80017d0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000b68:	f000 fe5c 	bl	8001824 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	PrivilegiosSVC();
 8000b6c:	f7ff fda6 	bl	80006bc <PrivilegiosSVC>

	/*---------- INICIO Ejercicio 1 en C ----------*/

	/** Valores de prueba para chequear que sean borrados
	 */
	uint32_t ej1_c_vector32[] = { 15, 99, 0xFFFFFFFF, 0xDEADBEEF };
 8000b70:	4bcb      	ldr	r3, [pc, #812]	; (8000ea0 <main+0x364>)
 8000b72:	f507 4443 	add.w	r4, r7, #49920	; 0xc300
 8000b76:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8000b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint32_t tam_vec_ej1_c = sizeof(ej1_c_vector32) / sizeof(*ej1_c_vector32);
 8000b80:	2304      	movs	r3, #4
 8000b82:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000b86:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8000b8a:	6013      	str	r3, [r2, #0]

	zeros(ej1_c_vector32, tam_vec_ej1_c);
 8000b8c:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000b90:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8000b94:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000b98:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8000b9c:	6811      	ldr	r1, [r2, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fdbd 	bl	800071e <zeros>

	/*---------- INICIO Ejercicio 2 en C ----------*/

	/** Valores de prueba para chequear el reslutado del producto
	 */
	uint32_t ej2_c_vector32In[] = { 5, 9, 25, 37, 1 };
 8000ba4:	4bbf      	ldr	r3, [pc, #764]	; (8000ea4 <main+0x368>)
 8000ba6:	f507 4543 	add.w	r5, r7, #49920	; 0xc300
 8000baa:	f105 0554 	add.w	r5, r5, #84	; 0x54
 8000bae:	461c      	mov	r4, r3
 8000bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	602b      	str	r3, [r5, #0]

	uint32_t tam_vec_ej2_c = sizeof(ej2_c_vector32In)
 8000bb8:	2305      	movs	r3, #5
 8000bba:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000bbe:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8000bc2:	6013      	str	r3, [r2, #0]
			/ sizeof(*ej2_c_vector32In);

	uint32_t ej2_c_vector32Out[tam_vec_ej2_c];
 8000bc4:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000bc8:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000bd6:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4688      	mov	r8, r1
 8000be0:	4699      	mov	r9, r3
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	f04f 0300 	mov.w	r3, #0
 8000bea:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000bee:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000bf2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	468a      	mov	sl, r1
 8000bfa:	469b      	mov	fp, r3
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000c08:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000c0c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000c10:	008b      	lsls	r3, r1, #2
 8000c12:	3307      	adds	r3, #7
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	ebad 0d03 	sub.w	sp, sp, r3
 8000c1c:	466b      	mov	r3, sp
 8000c1e:	3303      	adds	r3, #3
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000c28:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8000c2c:	6013      	str	r3, [r2, #0]

	productoEscalar32(ej2_c_vector32In, ej2_c_vector32Out, tam_vec_ej2_c, 7);
 8000c2e:	f507 4043 	add.w	r0, r7, #49920	; 0xc300
 8000c32:	f100 0054 	add.w	r0, r0, #84	; 0x54
 8000c36:	2307      	movs	r3, #7
 8000c38:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000c3c:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	f507 4143 	add.w	r1, r7, #49920	; 0xc300
 8000c46:	f101 019c 	add.w	r1, r1, #156	; 0x9c
 8000c4a:	6809      	ldr	r1, [r1, #0]
 8000c4c:	f7ff fd77 	bl	800073e <productoEscalar32>

	/*---------- INICIO Ejercicio 3 en C ----------*/

	/** Valores de prueba para chequear el reslutado del producto
	 */
	uint16_t ej3_c_vector16In[] = { 5, 9, 25, 37, 1 };
 8000c50:	4a95      	ldr	r2, [pc, #596]	; (8000ea8 <main+0x36c>)
 8000c52:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000c56:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5c:	c303      	stmia	r3!, {r0, r1}
 8000c5e:	801a      	strh	r2, [r3, #0]
	uint32_t tam_vec_ej3_c = sizeof(ej3_c_vector16In)
 8000c60:	2305      	movs	r3, #5
 8000c62:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000c66:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8000c6a:	6013      	str	r3, [r2, #0]
			/ sizeof(*ej3_c_vector16In);

	uint16_t ej3_c_vector16Out[tam_vec_ej3_c];
 8000c6c:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000c70:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	460b      	mov	r3, r1
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000c7e:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	2300      	movs	r3, #0
 8000c86:	61b9      	str	r1, [r7, #24]
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000c96:	4628      	mov	r0, r5
 8000c98:	0103      	lsls	r3, r0, #4
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	0102      	lsls	r2, r0, #4
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6139      	str	r1, [r7, #16]
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	0103      	lsls	r3, r0, #4
 8000cba:	4620      	mov	r0, r4
 8000cbc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	0102      	lsls	r2, r0, #4
 8000cc4:	004b      	lsls	r3, r1, #1
 8000cc6:	3307      	adds	r3, #7
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd0:	466b      	mov	r3, sp
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	085b      	lsrs	r3, r3, #1
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000cdc:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8000ce0:	6013      	str	r3, [r2, #0]

	productoEscalar16(ej3_c_vector16In, ej3_c_vector16Out, tam_vec_ej3_c, 3);
 8000ce2:	f507 4043 	add.w	r0, r7, #49920	; 0xc300
 8000ce6:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000cea:	2303      	movs	r3, #3
 8000cec:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000cf0:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	f507 4143 	add.w	r1, r7, #49920	; 0xc300
 8000cfa:	f101 0190 	add.w	r1, r1, #144	; 0x90
 8000cfe:	6809      	ldr	r1, [r1, #0]
 8000d00:	f7ff fd47 	bl	8000792 <productoEscalar16>
	/*---------- INICIO Ejercicio 4 en C ----------*/

	/** Valores de prueba para chequear el reslutado del producto
	 *  y si se producen desbordes
	 */
	uint16_t ej4_c_vector16In[] = { 0xFF0, 9, 25, 37, 1 };
 8000d04:	4a69      	ldr	r2, [pc, #420]	; (8000eac <main+0x370>)
 8000d06:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000d0a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d10:	c303      	stmia	r3!, {r0, r1}
 8000d12:	801a      	strh	r2, [r3, #0]

	uint32_t tam_vec_ej4_c = sizeof(ej4_c_vector16In)
 8000d14:	2305      	movs	r3, #5
 8000d16:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000d1a:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8000d1e:	6013      	str	r3, [r2, #0]
			/ sizeof(*ej4_c_vector16In);

	uint16_t ej4_c_vector16Out[tam_vec_ej4_c];
 8000d20:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000d24:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000d32:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	0103      	lsls	r3, r0, #4
 8000d4e:	4620      	mov	r0, r4
 8000d50:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000d54:	4620      	mov	r0, r4
 8000d56:	0102      	lsls	r2, r0, #4
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6039      	str	r1, [r7, #0]
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	0103      	lsls	r3, r0, #4
 8000d6e:	4620      	mov	r0, r4
 8000d70:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000d74:	4620      	mov	r0, r4
 8000d76:	0102      	lsls	r2, r0, #4
 8000d78:	004b      	lsls	r3, r1, #1
 8000d7a:	3307      	adds	r3, #7
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	ebad 0d03 	sub.w	sp, sp, r3
 8000d84:	466b      	mov	r3, sp
 8000d86:	3301      	adds	r3, #1
 8000d88:	085b      	lsrs	r3, r3, #1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000d90:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8000d94:	6013      	str	r3, [r2, #0]

    // Antes de la función a medir: contador de ciclos a cero
    DWT->CYCCNT = 0;
 8000d96:	4b41      	ldr	r3, [pc, #260]	; (8000e9c <main+0x360>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
	productoEscalar12(ej4_c_vector16In, ej4_c_vector16Out, tam_vec_ej4_c, 32);
 8000d9c:	f507 4043 	add.w	r0, r7, #49920	; 0xc300
 8000da0:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 8000da4:	2320      	movs	r3, #32
 8000da6:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000daa:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	f507 4143 	add.w	r1, r7, #49920	; 0xc300
 8000db4:	f101 0184 	add.w	r1, r1, #132	; 0x84
 8000db8:	6809      	ldr	r1, [r1, #0]
 8000dba:	f7ff fd15 	bl	80007e8 <productoEscalar12>
	// Obtiene cantidad de ciclos que demoró la función
	const volatile uint32_t Ciclos4C = DWT->CYCCNT;
 8000dbe:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <main+0x360>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000dc6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000dca:	6013      	str	r3, [r2, #0]
	/*------------ FIN Ejercicio 4 en C -----------*/

	/*---------- INICIO Ejercicio 5 en C ----------*/

#define VEC_SIZE_EJ5 14U
	uint16_t ej5_c_vector16In[VEC_SIZE_EJ5] = { 2, 10, 10, 2, 2, 0, 0, 20, 20,
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <main+0x374>)
 8000dce:	f507 4443 	add.w	r4, r7, #49920	; 0xc300
 8000dd2:	f104 041c 	add.w	r4, r4, #28
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000de0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			2, 2, 2, 2, 2 };
	uint16_t ej5_c_vector16Out[VEC_SIZE_EJ5] = { 0 };
 8000de4:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]

    // Antes de la función a medir: contador de ciclos a cero
    DWT->CYCCNT = 0;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <main+0x360>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
	filtroVentana10(ej5_c_vector16In, ej5_c_vector16Out, VEC_SIZE_EJ5);
 8000dfe:	f507 4143 	add.w	r1, r7, #49920	; 0xc300
 8000e02:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000e06:	f103 031c 	add.w	r3, r3, #28
 8000e0a:	220e      	movs	r2, #14
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fd2d 	bl	800086c <filtroVentana10>
	// Obtiene cantidad de ciclos que demoró la función
	const volatile uint32_t Ciclos5C = DWT->CYCCNT;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <main+0x360>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f507 4242 	add.w	r2, r7, #49664	; 0xc200
 8000e1a:	f102 02fc 	add.w	r2, r2, #252	; 0xfc
 8000e1e:	6013      	str	r3, [r2, #0]

	/*------------ FIN Ejercicio 5 en C -----------*/

	/*---------- INICIO Ejercicio 6 en C ----------*/
	int32_t ej6_c_vector32In[VEC_SIZE_EJ5] = { -1, 500000000, -500000000, 65534,
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <main+0x378>)
 8000e22:	f507 4442 	add.w	r4, r7, #49664	; 0xc200
 8000e26:	f104 04c4 	add.w	r4, r4, #196	; 0xc4
 8000e2a:	461d      	mov	r5, r3
 8000e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e3c:	e884 0003 	stmia.w	r4, {r0, r1}
			65535, 65536, -65534, -65535, -65536, 36868, 36863, 36864, -36863,
			-36864 };
	int16_t ej6_c_vector16Out[VEC_SIZE_EJ5] = { 0 };
 8000e40:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000e44:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000e48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	6053      	str	r3, [r2, #4]
 8000e54:	6093      	str	r3, [r2, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
 8000e58:	6113      	str	r3, [r2, #16]
 8000e5a:	6153      	str	r3, [r2, #20]
 8000e5c:	6193      	str	r3, [r2, #24]

	pack32to16(ej6_c_vector32In, ej6_c_vector16Out, VEC_SIZE_EJ5);
 8000e5e:	f507 4142 	add.w	r1, r7, #49664	; 0xc200
 8000e62:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 8000e66:	f507 4342 	add.w	r3, r7, #49664	; 0xc200
 8000e6a:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8000e6e:	220e      	movs	r2, #14
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fd3b 	bl	80008ec <pack32to16>

	/*------------ FIN Ejercicio 6 en C -----------*/

	/*---------- INICIO Ejercicio 7 en C ----------*/
	int32_t ej7_c_vector32In[VEC_SIZE_EJ5] = { -1, -500000000, 65534, 65535,
 8000e76:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000e7a:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000e7e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <main+0x37c>)
 8000e84:	461c      	mov	r4, r3
 8000e86:	4615      	mov	r5, r2
 8000e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e98:	e010      	b.n	8000ebc <main+0x380>
 8000e9a:	bf00      	nop
 8000e9c:	e0001000 	.word	0xe0001000
 8000ea0:	080046fc 	.word	0x080046fc
 8000ea4:	0800470c 	.word	0x0800470c
 8000ea8:	08004720 	.word	0x08004720
 8000eac:	0800472c 	.word	0x0800472c
 8000eb0:	08004738 	.word	0x08004738
 8000eb4:	08004754 	.word	0x08004754
 8000eb8:	0800478c 	.word	0x0800478c
 8000ebc:	e884 0003 	stmia.w	r4, {r0, r1}
			65536, -65534, 500000000, -65535, -65536, 36868, 36863, 36864,
			-36863, -36864 };
	uint32_t max_indice = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000ec6:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8000eca:	6013      	str	r3, [r2, #0]

	max_indice = max(ej7_c_vector32In, VEC_SIZE_EJ5);
 8000ecc:	f507 4342 	add.w	r3, r7, #49664	; 0xc200
 8000ed0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8000ed4:	210e      	movs	r1, #14
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fd30 	bl	800093c <max>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000ee2:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8000ee6:	6013      	str	r3, [r2, #0]

	/*------------ FIN Ejercicio 7 en C -----------*/

	/*---------- INICIO Ejercicio 8 en C ----------*/
	int32_t ej8_c_vector32In[VEC_SIZE_EJ5] = { -1, -500000000, 65534, 65535,
 8000ee8:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000eec:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000ef0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000ef4:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <main+0x470>)
 8000ef6:	461c      	mov	r4, r3
 8000ef8:	4615      	mov	r5, r2
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f0a:	e884 0003 	stmia.w	r4, {r0, r1}
			65536, -65534, 500000000, -65535, -65536, 36868, 36863, 36864,
			-36863, -36864 };
	int32_t ej8_c_vector32Out[VEC_SIZE_EJ5] = { 0 };
 8000f0e:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000f12:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000f16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	2338      	movs	r3, #56	; 0x38
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f003 fa77 	bl	8004414 <memset>

	downsampleM(ej8_c_vector32In, ej8_c_vector32Out, VEC_SIZE_EJ5, 3);
 8000f26:	f507 4142 	add.w	r1, r7, #49664	; 0xc200
 8000f2a:	f507 4042 	add.w	r0, r7, #49664	; 0xc200
 8000f2e:	f100 0038 	add.w	r0, r0, #56	; 0x38
 8000f32:	2303      	movs	r3, #3
 8000f34:	220e      	movs	r2, #14
 8000f36:	f7ff fd2a 	bl	800098e <downsampleM>

	/*------------ FIN Ejercicio 8 en C -----------*/

	/*---------- INICIO Ejercicio 9 en C ----------*/
	uint16_t ej9_c_vector16In[VEC_SIZE_EJ5] = { 1, 2, 3, 4,
 8000f3a:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000f3e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000f42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <main+0x474>)
 8000f48:	461c      	mov	r4, r3
 8000f4a:	4615      	mov	r5, r2
 8000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			5, 6, 7, 8, 9, 10, 11, 12,
			13, 14 };

	invertir(ej9_c_vector16In, VEC_SIZE_EJ5);
 8000f58:	f507 4341 	add.w	r3, r7, #49408	; 0xc100
 8000f5c:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8000f60:	210e      	movs	r1, #14
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fd49 	bl	80009fa <invertir>


	/*---------- INICIO Ejercicio 10 en C ----------*/
#define VEC_SIZE_EJ10 4096U

	int16_t ej10_c_vector16In[VEC_SIZE_EJ10] = { 0 };
 8000f68:	f507 4323 	add.w	r3, r7, #41728	; 0xa300
 8000f6c:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000f70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f003 fa49 	bl	8004414 <memset>
	int16_t ej10_c_vector16Out[VEC_SIZE_EJ10] = { 0 };
 8000f82:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 8000f86:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000f8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f94:	461a      	mov	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f003 fa3c 	bl	8004414 <memset>

	/**
	 * Vector inicializado con una rampa suave
		 */
	for( uint32_t i = 0; i < VEC_SIZE_EJ10; i++){
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000fa2:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e022      	b.n	8000ff0 <main+0x4b4>
 8000faa:	bf00      	nop
 8000fac:	0800478c 	.word	0x0800478c
 8000fb0:	080047c4 	.word	0x080047c4
		ej10_c_vector16In[i] = i;
 8000fb4:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000fb8:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b219      	sxth	r1, r3
 8000fc0:	f507 4323 	add.w	r3, r7, #41728	; 0xa300
 8000fc4:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000fc8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000fcc:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000fd0:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for( uint32_t i = 0; i < VEC_SIZE_EJ10; i++){
 8000fda:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000fde:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8000fea:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8000ff4:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ffe:	d3d9      	bcc.n	8000fb4 <main+0x478>
	}

    // Antes de la función a medir: contador de ciclos a cero
    DWT->CYCCNT = 0;
 8001000:	4bd8      	ldr	r3, [pc, #864]	; (8001364 <main+0x828>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
	eco(ej10_c_vector16In, ej10_c_vector16Out, VEC_SIZE_EJ10);
 8001006:	f507 4102 	add.w	r1, r7, #33280	; 0x8200
 800100a:	f101 0138 	add.w	r1, r1, #56	; 0x38
 800100e:	3954      	subs	r1, #84	; 0x54
 8001010:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001014:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8001018:	3b14      	subs	r3, #20
 800101a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fd21 	bl	8000a66 <eco>
	// Obtiene cantidad de ciclos que demoró la función
	const volatile uint32_t Ciclos10C = DWT->CYCCNT;
 8001024:	4bcf      	ldr	r3, [pc, #828]	; (8001364 <main+0x828>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800102c:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001030:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001034:	601a      	str	r2, [r3, #0]

	/*---------- INICIO Ejercicio 1 en Assembly ----------*/

	/** Valores de prueba para chequear que sean borrados
	 */
	uint32_t ej1_asm_vector32[] = { 15, 99, 0xFFFFFFFF, 0xDEADBEEF };
 8001036:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800103a:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800103e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001042:	4ac9      	ldr	r2, [pc, #804]	; (8001368 <main+0x82c>)
 8001044:	461c      	mov	r4, r3
 8001046:	4613      	mov	r3, r2
 8001048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint32_t tam_vec_ej1_asm = sizeof(ej1_asm_vector32)
 800104e:	2304      	movs	r3, #4
 8001050:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8001054:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001058:	6013      	str	r3, [r2, #0]
			/ sizeof(*ej1_asm_vector32);

	zeros(ej1_asm_vector32, tam_vec_ej1_asm);
 800105a:	f507 4302 	add.w	r3, r7, #33280	; 0x8200
 800105e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001062:	3b68      	subs	r3, #104	; 0x68
 8001064:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8001068:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 800106c:	6811      	ldr	r1, [r2, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fb55 	bl	800071e <zeros>
	/*------------ FIN Ejercicio 1 en Assembly -----------*/

	/*---------- INICIO Ejercicio 2 en Assembly ----------*/
	/** Valores de prueba para chequear el reslutado del producto
	 */
	uint32_t ej2_asm_vector32In[] = { 35, 9, 7, 8 };
 8001074:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 8001078:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800107c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001080:	4aba      	ldr	r2, [pc, #744]	; (800136c <main+0x830>)
 8001082:	461c      	mov	r4, r3
 8001084:	4613      	mov	r3, r2
 8001086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t ej2_asm_vector32Out[] = { 35, 9, 7, 8 };
 800108c:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 8001090:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001094:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001098:	4ab4      	ldr	r2, [pc, #720]	; (800136c <main+0x830>)
 800109a:	461c      	mov	r4, r3
 800109c:	4613      	mov	r3, r2
 800109e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	asm_zeros(ej2_asm_vector32Out, 4);
 80010a4:	f507 4301 	add.w	r3, r7, #33024	; 0x8100
 80010a8:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80010ac:	3b08      	subs	r3, #8
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f89d 	bl	80001f0 <asm_zeros>

	/** Se multiplica por 5 para comprobar fácilmente los resultados
	 */
	asm_productoEscalar32(ej2_asm_vector32In, ej2_asm_vector32Out, 4, 5);
 80010b6:	f507 4101 	add.w	r1, r7, #33024	; 0x8100
 80010ba:	f101 01b8 	add.w	r1, r1, #184	; 0xb8
 80010be:	3908      	subs	r1, #8
 80010c0:	f507 4002 	add.w	r0, r7, #33280	; 0x8200
 80010c4:	f100 0038 	add.w	r0, r0, #56	; 0x38
 80010c8:	3878      	subs	r0, #120	; 0x78
 80010ca:	2305      	movs	r3, #5
 80010cc:	2204      	movs	r2, #4
 80010ce:	f7ff f897 	bl	8000200 <asm_productoEscalar32>
	/*---------- INICIO Ejercicio 3 en Assembly ----------*/

	/** Valores de prueba para chequear el reslutado del producto
	 *  y si se produce desborde
	 */
	uint16_t ej3_asm_vector16In[] = { 0xFFF0, 0xFFFF, 7, 8 };
 80010d2:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 80010d6:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80010da:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80010de:	4aa4      	ldr	r2, [pc, #656]	; (8001370 <main+0x834>)
 80010e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t ej3_asm_vector16Out[] = { 35, 9, 7, 8 };
 80010e8:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 80010ec:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80010f0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80010f4:	4a9f      	ldr	r2, [pc, #636]	; (8001374 <main+0x838>)
 80010f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fa:	e883 0003 	stmia.w	r3, {r0, r1}

	/** Se multiplica por 2 para comprobar fácilmente si hay desborde
	 */
	asm_productoEscalar16(ej3_asm_vector16In, ej3_asm_vector16Out, 4, 2);
 80010fe:	f507 4101 	add.w	r1, r7, #33024	; 0x8100
 8001102:	f101 01b8 	add.w	r1, r1, #184	; 0xb8
 8001106:	3918      	subs	r1, #24
 8001108:	f507 4001 	add.w	r0, r7, #33024	; 0x8100
 800110c:	f100 00b8 	add.w	r0, r0, #184	; 0xb8
 8001110:	3810      	subs	r0, #16
 8001112:	2302      	movs	r3, #2
 8001114:	2204      	movs	r2, #4
 8001116:	f7ff f87e 	bl	8000216 <asm_productoEscalar16>
	/*---------- INICIO Ejercicio 4 en Assembly ----------*/

	/** Valores de prueba para chequear el reslutado del producto
	 *  y si satura al producirse desborde
	 */
	uint16_t ej4_asm_vector16In[4] = { 0xFFF0, 0xFFFF, 7, 8 };
 800111a:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800111e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001122:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001126:	4a92      	ldr	r2, [pc, #584]	; (8001370 <main+0x834>)
 8001128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t ej4_asm_vector16Out[4] = { 0 };
 8001130:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 8001134:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001138:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800113c:	461a      	mov	r2, r3
 800113e:	2300      	movs	r3, #0
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	6053      	str	r3, [r2, #4]

    // Antes de la función a medir: contador de ciclos a cero
    DWT->CYCCNT = 0;
 8001144:	4b87      	ldr	r3, [pc, #540]	; (8001364 <main+0x828>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
	asm_productoEscalar12(ej4_asm_vector16In, ej4_asm_vector16Out, 4, 2);
 800114a:	f507 4101 	add.w	r1, r7, #33024	; 0x8100
 800114e:	f101 01b8 	add.w	r1, r1, #184	; 0xb8
 8001152:	3928      	subs	r1, #40	; 0x28
 8001154:	f507 4001 	add.w	r0, r7, #33024	; 0x8100
 8001158:	f100 00b8 	add.w	r0, r0, #184	; 0xb8
 800115c:	3820      	subs	r0, #32
 800115e:	2302      	movs	r3, #2
 8001160:	2204      	movs	r2, #4
 8001162:	f7ff f863 	bl	800022c <asm_productoEscalar12>
	// Obtiene cantidad de ciclos que demoró la función
	const volatile uint32_t Ciclos4ASM = DWT->CYCCNT;
 8001166:	4b7f      	ldr	r3, [pc, #508]	; (8001364 <main+0x828>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800116e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001172:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001176:	601a      	str	r2, [r3, #0]

	/*------------ FIN Ejercicio 4 en Assembly -----------*/

	/*---------- INICIO Ejercicio 5 en Assembly ----------*/

	uint16_t ej5_asm_vector16In[VEC_SIZE_EJ5] = { 2, 10, 10, 2, 2, 0, 0, 20, 20,
 8001178:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800117c:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001180:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001184:	4a7c      	ldr	r2, [pc, #496]	; (8001378 <main+0x83c>)
 8001186:	461c      	mov	r4, r3
 8001188:	4615      	mov	r5, r2
 800118a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			2, 2, 2, 2, 2 };
	uint16_t ej5_asm_vector16Out[VEC_SIZE_EJ5] = { 0 };
 8001196:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800119a:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800119e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80011a2:	461a      	mov	r2, r3
 80011a4:	2300      	movs	r3, #0
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	6053      	str	r3, [r2, #4]
 80011aa:	6093      	str	r3, [r2, #8]
 80011ac:	60d3      	str	r3, [r2, #12]
 80011ae:	6113      	str	r3, [r2, #16]
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	6193      	str	r3, [r2, #24]

    // Antes de la función a medir: contador de ciclos a cero
    DWT->CYCCNT = 0;
 80011b4:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <main+0x828>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
	asm_filtroVentana10(ej5_asm_vector16In, ej5_asm_vector16Out, VEC_SIZE_EJ5);
 80011ba:	f507 4101 	add.w	r1, r7, #33024	; 0x8100
 80011be:	f101 01b8 	add.w	r1, r1, #184	; 0xb8
 80011c2:	3964      	subs	r1, #100	; 0x64
 80011c4:	f507 4301 	add.w	r3, r7, #33024	; 0x8100
 80011c8:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80011cc:	3b48      	subs	r3, #72	; 0x48
 80011ce:	220e      	movs	r2, #14
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f83e 	bl	8000252 <asm_filtroVentana10>
	// Obtiene cantidad de ciclos que demoró la función
	const volatile uint32_t Ciclos5ASM = DWT->CYCCNT;
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <main+0x828>)
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 80011de:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80011e2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80011e6:	601a      	str	r2, [r3, #0]

	/*------------ FIN Ejercicio 5 en Assembly -----------*/

	/*---------- INICIO Ejercicio 6 en Assembly ----------*/
	int32_t ej6_asm_vector32In[VEC_SIZE_EJ5] = { -1, 500000000, -500000000,
 80011e8:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 80011ec:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80011f0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80011f4:	4a61      	ldr	r2, [pc, #388]	; (800137c <main+0x840>)
 80011f6:	461c      	mov	r4, r3
 80011f8:	4615      	mov	r5, r2
 80011fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0003 	ldmia.w	r5, {r0, r1}
 800120a:	e884 0003 	stmia.w	r4, {r0, r1}
			65534, 65535, 65536, -65534, -65535, -65536, 36868, 36863, 36864,
			-36863, -36864 };
	int16_t ej6_asm_vector16Out[VEC_SIZE_EJ5] = { 0 };
 800120e:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 8001212:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001216:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800121a:	461a      	mov	r2, r3
 800121c:	2300      	movs	r3, #0
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	6053      	str	r3, [r2, #4]
 8001222:	6093      	str	r3, [r2, #8]
 8001224:	60d3      	str	r3, [r2, #12]
 8001226:	6113      	str	r3, [r2, #16]
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	6193      	str	r3, [r2, #24]

	asm_pack32to16(ej6_asm_vector32In, ej6_asm_vector16Out, VEC_SIZE_EJ5);
 800122c:	f507 4101 	add.w	r1, r7, #33024	; 0x8100
 8001230:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8001234:	393c      	subs	r1, #60	; 0x3c
 8001236:	f507 4301 	add.w	r3, r7, #33024	; 0x8100
 800123a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800123e:	3b20      	subs	r3, #32
 8001240:	220e      	movs	r2, #14
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f822 	bl	800028c <asm_pack32to16>

	/*------------ FIN Ejercicio 6 en Assembly -----------*/

	/*---------- INICIO Ejercicio 7 en Assembly ----------*/
	int32_t ej7_asm_vector32In[VEC_SIZE_EJ5] = { -1, -500000000, 65534, 65535,
 8001248:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800124c:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001250:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <main+0x844>)
 8001256:	461c      	mov	r4, r3
 8001258:	4615      	mov	r5, r2
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e895 0003 	ldmia.w	r5, {r0, r1}
 800126a:	e884 0003 	stmia.w	r4, {r0, r1}
			65536, -65534, 500000000, -65535, -65536, 36868, 36863, 36864,
			-36863, -36864 };
	uint32_t asm_max_indice = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8001274:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001278:	6013      	str	r3, [r2, #0]

	asm_max_indice = asm_max(ej7_asm_vector32In, VEC_SIZE_EJ5);
 800127a:	f507 4301 	add.w	r3, r7, #33024	; 0x8100
 800127e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001282:	3b74      	subs	r3, #116	; 0x74
 8001284:	210e      	movs	r1, #14
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f80f 	bl	80002aa <asm_max>
 800128c:	4603      	mov	r3, r0
 800128e:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8001292:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001296:	6013      	str	r3, [r2, #0]
	/*---------- INICIO Ejercicio 8 en Assembly ----------*/
	/**
	 * El resultado no es exactamente igual que en C, ya que la implementación con módulo
	 * comienza borrando el primer elemento. Igualmente en ambos casos eliminan 1 de cada N
	 */
	int32_t ej8_asm_vector32In[VEC_SIZE_EJ5] = { -1, -500000000, 65534, 65535,
 8001298:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 800129c:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80012a0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80012a4:	4a36      	ldr	r2, [pc, #216]	; (8001380 <main+0x844>)
 80012a6:	461c      	mov	r4, r3
 80012a8:	4615      	mov	r5, r2
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ba:	e884 0003 	stmia.w	r4, {r0, r1}
			65536, -65534, 500000000, -65535, -65536, 36868, 36863, 36864,
			-36863, -36864 };
	int32_t ej8_asm_vector32Out[VEC_SIZE_EJ5] = { 0 };
 80012be:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 80012c2:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80012c6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80012ca:	4618      	mov	r0, r3
 80012cc:	2338      	movs	r3, #56	; 0x38
 80012ce:	461a      	mov	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	f003 f89f 	bl	8004414 <memset>

	asm_downsampleM(ej8_asm_vector32In, ej8_asm_vector32Out, VEC_SIZE_EJ5, 3);
 80012d6:	f507 4100 	add.w	r1, r7, #32768	; 0x8000
 80012da:	f101 01b8 	add.w	r1, r1, #184	; 0xb8
 80012de:	3964      	subs	r1, #100	; 0x64
 80012e0:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80012e4:	f100 00b8 	add.w	r0, r0, #184	; 0xb8
 80012e8:	382c      	subs	r0, #44	; 0x2c
 80012ea:	2303      	movs	r3, #3
 80012ec:	220e      	movs	r2, #14
 80012ee:	f7fe fff1 	bl	80002d4 <asm_downsampleM>

	/*------------ FIN Ejercicio 8 en Assembly -----------*/

	/*---------- INICIO Ejercicio 9 en Assembly ----------*/
	uint16_t ej9_asm_vector16In[VEC_SIZE_EJ5] = { 1, 2, 3, 4,
 80012f2:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 80012f6:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80012fa:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <main+0x848>)
 8001300:	461c      	mov	r4, r3
 8001302:	4615      	mov	r5, r2
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			5, 6, 7, 8, 9, 10, 11, 12,
			13, 14 };

	asm_invertir(ej9_asm_vector16In, VEC_SIZE_EJ5);
 8001310:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001314:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001318:	210e      	movs	r1, #14
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ffeb 	bl	80002f6 <asm_invertir>

	/*------------ FIN Ejercicio 9 en Assembly -----------*/

	/*---------- INICIO Ejercicio 10 en Assembly ----------*/
	int16_t ej10_asm_vector16In[VEC_SIZE_EJ10] = { 0 };
 8001320:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8001324:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001328:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800132c:	4618      	mov	r0, r3
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	461a      	mov	r2, r3
 8001334:	2100      	movs	r1, #0
 8001336:	f003 f86d 	bl	8004414 <memset>
	int16_t ej10_asm_vector16Out[VEC_SIZE_EJ10] = { 0 };
 800133a:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 800133e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001342:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001346:	4618      	mov	r0, r3
 8001348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134c:	461a      	mov	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	f003 f860 	bl	8004414 <memset>

	/**
	 * Vector inicializado con una rampa suave
		 */
	for( uint32_t i = 0; i < VEC_SIZE_EJ10; i++){
 8001354:	2300      	movs	r3, #0
 8001356:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 800135a:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e030      	b.n	80013c4 <main+0x888>
 8001362:	bf00      	nop
 8001364:	e0001000 	.word	0xe0001000
 8001368:	080046fc 	.word	0x080046fc
 800136c:	080047e0 	.word	0x080047e0
 8001370:	080047f0 	.word	0x080047f0
 8001374:	080047f8 	.word	0x080047f8
 8001378:	08004738 	.word	0x08004738
 800137c:	08004754 	.word	0x08004754
 8001380:	0800478c 	.word	0x0800478c
 8001384:	080047c4 	.word	0x080047c4
		ej10_asm_vector16In[i] = i;
 8001388:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 800138c:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b219      	sxth	r1, r3
 8001394:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8001398:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800139c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80013a0:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 80013a4:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for( uint32_t i = 0; i < VEC_SIZE_EJ10; i++){
 80013ae:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 80013b2:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 80013be:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 80013c8:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d2:	d3d9      	bcc.n	8001388 <main+0x84c>
	}

    // Antes de la función a medir: contador de ciclos a cero
    DWT->CYCCNT = 0;
 80013d4:	4b92      	ldr	r3, [pc, #584]	; (8001620 <main+0xae4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
	asm_eco(ej10_asm_vector16In, ej10_asm_vector16Out, VEC_SIZE_EJ10);
 80013da:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80013de:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80013e2:	3b80      	subs	r3, #128	; 0x80
 80013e4:	f507 40c0 	add.w	r0, r7, #24576	; 0x6000
 80013e8:	f100 0038 	add.w	r0, r0, #56	; 0x38
 80013ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7fe ff98 	bl	8000326 <asm_eco>
	// Obtiene cantidad de ciclos que demoró la función
	const volatile uint32_t Ciclos10ASM = DWT->CYCCNT;
 80013f6:	4b8a      	ldr	r3, [pc, #552]	; (8001620 <main+0xae4>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 80013fe:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001402:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001406:	601a      	str	r2, [r3, #0]


	/*------------ FIN Ejercicio 10 en Assembly -----------*/

	/*---------- INICIO Ejercicio 10SIMD en Assembly ----------*/
	int16_t ej10_asm_simd_vector16In[VEC_SIZE_EJ10] = { 0 };
 8001408:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 800140c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001410:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001414:	4618      	mov	r0, r3
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	461a      	mov	r2, r3
 800141c:	2100      	movs	r1, #0
 800141e:	f002 fff9 	bl	8004414 <memset>
	int16_t ej10_asm_simd_vector16Out[VEC_SIZE_EJ10] = { 0 };
 8001422:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001426:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800142a:	4618      	mov	r0, r3
 800142c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001430:	461a      	mov	r2, r3
 8001432:	2100      	movs	r1, #0
 8001434:	f002 ffee 	bl	8004414 <memset>

	/**
	 * Vector inicializado con una rampa suave
		 */
	for( uint32_t i = 0; i < VEC_SIZE_EJ10; i++){
 8001438:	2300      	movs	r3, #0
 800143a:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 800143e:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e01d      	b.n	8001482 <main+0x946>
		ej10_asm_simd_vector16In[i] = i;
 8001446:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 800144a:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b219      	sxth	r1, r3
 8001452:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8001456:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800145a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800145e:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 8001462:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for( uint32_t i = 0; i < VEC_SIZE_EJ10; i++){
 800146c:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8001470:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	f507 4243 	add.w	r2, r7, #49920	; 0xc300
 800147c:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 8001486:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001490:	d3d9      	bcc.n	8001446 <main+0x90a>
	}

    // Antes de la función a medir: contador de ciclos a cero
    DWT->CYCCNT = 0;
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <main+0xae4>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
	asm_eco_simd(ej10_asm_simd_vector16In, ej10_asm_simd_vector16Out, VEC_SIZE_EJ10);
 8001498:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800149c:	3984      	subs	r1, #132	; 0x84
 800149e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80014a2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80014a6:	3b84      	subs	r3, #132	; 0x84
 80014a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ff56 	bl	800035e <asm_eco_simd>
	// Obtiene cantidad de ciclos que demoró la función
	const volatile uint32_t Ciclos10SIMD = DWT->CYCCNT;
 80014b2:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <main+0xae4>)
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80014ba:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80014be:	601a      	str	r2, [r3, #0]


	/*------------ FIN Ejercicio 10SIMD en Assembly -----------*/
#define INIT_BUFF 10U
	unsigned char sendBuff[INIT_BUFF] = {0};
 80014c0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80014c4:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	809a      	strh	r2, [r3, #4]



	uartsendString((uint8_t *)"---------------------------------------------------------\r\n");
 80014d4:	4853      	ldr	r0, [pc, #332]	; (8001624 <main+0xae8>)
 80014d6:	f7ff fb17 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"            ARQUITECTURA DE MICROPROCESADORES\r\n");
 80014da:	4853      	ldr	r0, [pc, #332]	; (8001628 <main+0xaec>)
 80014dc:	f7ff fb14 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"---------------------------------------------------------\r\n\n");
 80014e0:	4852      	ldr	r0, [pc, #328]	; (800162c <main+0xaf0>)
 80014e2:	f7ff fb11 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"Mediciones de performance de ejercicios seleccionados\r\n");
 80014e6:	4852      	ldr	r0, [pc, #328]	; (8001630 <main+0xaf4>)
 80014e8:	f7ff fb0e 	bl	8000b08 <uartsendString>

	uartsendString((uint8_t *)"\r\n\n    ---- Ejercicio 4 ----    ");
 80014ec:	4851      	ldr	r0, [pc, #324]	; (8001634 <main+0xaf8>)
 80014ee:	f7ff fb0b 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"\r\nEjercicio 4 en C:        ");
 80014f2:	4851      	ldr	r0, [pc, #324]	; (8001638 <main+0xafc>)
 80014f4:	f7ff fb08 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)itoa(Ciclos4C, sendBuff, INIT_BUFF));
 80014f8:	f507 4343 	add.w	r3, r7, #49920	; 0xc300
 80014fc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001506:	3b94      	subs	r3, #148	; 0x94
 8001508:	220a      	movs	r2, #10
 800150a:	4619      	mov	r1, r3
 800150c:	f002 ff80 	bl	8004410 <itoa>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff faf8 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"\r\nEjercicio 4 en Assembly: ");
 8001518:	4848      	ldr	r0, [pc, #288]	; (800163c <main+0xb00>)
 800151a:	f7ff faf5 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)itoa(Ciclos4ASM, sendBuff, INIT_BUFF));
 800151e:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 8001522:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001526:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001530:	3b94      	subs	r3, #148	; 0x94
 8001532:	220a      	movs	r2, #10
 8001534:	4619      	mov	r1, r3
 8001536:	f002 ff6b 	bl	8004410 <itoa>
 800153a:	4603      	mov	r3, r0
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fae3 	bl	8000b08 <uartsendString>

	uartsendString((uint8_t *)"\r\n\n    ---- Ejercicio 5 ----    ");
 8001542:	483f      	ldr	r0, [pc, #252]	; (8001640 <main+0xb04>)
 8001544:	f7ff fae0 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"\r\nEjercicio 5 en C:        ");
 8001548:	483e      	ldr	r0, [pc, #248]	; (8001644 <main+0xb08>)
 800154a:	f7ff fadd 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)itoa(Ciclos5C, sendBuff, INIT_BUFF));
 800154e:	f507 4342 	add.w	r3, r7, #49664	; 0xc200
 8001552:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800155c:	3b94      	subs	r3, #148	; 0x94
 800155e:	220a      	movs	r2, #10
 8001560:	4619      	mov	r1, r3
 8001562:	f002 ff55 	bl	8004410 <itoa>
 8001566:	4603      	mov	r3, r0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff facd 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"\r\nEjercicio 5 en Assembly: ");
 800156e:	4836      	ldr	r0, [pc, #216]	; (8001648 <main+0xb0c>)
 8001570:	f7ff faca 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)itoa(Ciclos5ASM, sendBuff, INIT_BUFF));
 8001574:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 8001578:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800157c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001586:	3b94      	subs	r3, #148	; 0x94
 8001588:	220a      	movs	r2, #10
 800158a:	4619      	mov	r1, r3
 800158c:	f002 ff40 	bl	8004410 <itoa>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fab8 	bl	8000b08 <uartsendString>

	uartsendString((uint8_t *)"\r\n\n    ---- Ejercicio 10 ----    ");
 8001598:	482c      	ldr	r0, [pc, #176]	; (800164c <main+0xb10>)
 800159a:	f7ff fab5 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"\r\nEjercicio 10 en C:                 ");
 800159e:	482c      	ldr	r0, [pc, #176]	; (8001650 <main+0xb14>)
 80015a0:	f7ff fab2 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)itoa(Ciclos10C, sendBuff, INIT_BUFF));
 80015a4:	f507 4303 	add.w	r3, r7, #33536	; 0x8300
 80015a8:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80015ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015b6:	3b94      	subs	r3, #148	; 0x94
 80015b8:	220a      	movs	r2, #10
 80015ba:	4619      	mov	r1, r3
 80015bc:	f002 ff28 	bl	8004410 <itoa>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff faa0 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"\r\nEjercicio 10 en Assembly:          ");
 80015c8:	4822      	ldr	r0, [pc, #136]	; (8001654 <main+0xb18>)
 80015ca:	f7ff fa9d 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)itoa(Ciclos10ASM, sendBuff, INIT_BUFF));
 80015ce:	f507 4387 	add.w	r3, r7, #17280	; 0x4380
 80015d2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80015d6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015e0:	3b94      	subs	r3, #148	; 0x94
 80015e2:	220a      	movs	r2, #10
 80015e4:	4619      	mov	r1, r3
 80015e6:	f002 ff13 	bl	8004410 <itoa>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fa8b 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)"\r\nEjercicio 10 en Assembly con SIMD: ");
 80015f2:	4819      	ldr	r0, [pc, #100]	; (8001658 <main+0xb1c>)
 80015f4:	f7ff fa88 	bl	8000b08 <uartsendString>
	uartsendString((uint8_t *)itoa(Ciclos10SIMD, sendBuff, INIT_BUFF));
 80015f8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80015fc:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001606:	3b94      	subs	r3, #148	; 0x94
 8001608:	220a      	movs	r2, #10
 800160a:	4619      	mov	r1, r3
 800160c:	f002 ff00 	bl	8004410 <itoa>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fa78 	bl	8000b08 <uartsendString>


	uartsendString((uint8_t *)"\r\n");
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <main+0xb20>)
 800161a:	f7ff fa75 	bl	8000b08 <uartsendString>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800161e:	e7fe      	b.n	800161e <main+0xae2>
 8001620:	e0001000 	.word	0xe0001000
 8001624:	080044c0 	.word	0x080044c0
 8001628:	080044fc 	.word	0x080044fc
 800162c:	0800452c 	.word	0x0800452c
 8001630:	0800456c 	.word	0x0800456c
 8001634:	080045a4 	.word	0x080045a4
 8001638:	080045c8 	.word	0x080045c8
 800163c:	080045e4 	.word	0x080045e4
 8001640:	08004600 	.word	0x08004600
 8001644:	08004624 	.word	0x08004624
 8001648:	08004640 	.word	0x08004640
 800164c:	0800465c 	.word	0x0800465c
 8001650:	08004680 	.word	0x08004680
 8001654:	080046a8 	.word	0x080046a8
 8001658:	080046d0 	.word	0x080046d0
 800165c:	080046f8 	.word	0x080046f8

08001660 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	; 0x50
 8001664:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2230      	movs	r2, #48	; 0x30
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fed0 	bl	8004414 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <SystemClock_Config+0xcc>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <SystemClock_Config+0xcc>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	; 0x40
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <SystemClock_Config+0xd0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <SystemClock_Config+0xd0>)
 80016aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c6:	2302      	movs	r3, #2
 80016c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80016d4:	23a8      	movs	r3, #168	; 0xa8
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80016dc:	2307      	movs	r3, #7
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fafb 	bl	8002ce0 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x94>
		Error_Handler();
 80016f0:	f000 f974 	bl	80019dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001704:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2105      	movs	r1, #5
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fd5c 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xc2>
		Error_Handler();
 800171e:	f000 f95d 	bl	80019dc <Error_Handler>
	}
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <MX_ETH_Init+0x84>)
 800173a:	4a20      	ldr	r2, [pc, #128]	; (80017bc <MX_ETH_Init+0x88>)
 800173c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <MX_ETH_Init+0x8c>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_ETH_Init+0x8c>)
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_ETH_Init+0x8c>)
 800174c:	22e1      	movs	r2, #225	; 0xe1
 800174e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_ETH_Init+0x8c>)
 8001752:	2200      	movs	r2, #0
 8001754:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_ETH_Init+0x8c>)
 8001758:	2200      	movs	r2, #0
 800175a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_ETH_Init+0x8c>)
 800175e:	2200      	movs	r2, #0
 8001760:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_ETH_Init+0x84>)
 8001764:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <MX_ETH_Init+0x8c>)
 8001766:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_ETH_Init+0x84>)
 800176a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800176e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_ETH_Init+0x84>)
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <MX_ETH_Init+0x90>)
 8001774:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_ETH_Init+0x84>)
 8001778:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <MX_ETH_Init+0x94>)
 800177a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_ETH_Init+0x84>)
 800177e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001782:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_ETH_Init+0x84>)
 8001786:	f000 fcb5 	bl	80020f4 <HAL_ETH_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ETH_Init+0x60>
		Error_Handler();
 8001790:	f000 f924 	bl	80019dc <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001794:	2238      	movs	r2, #56	; 0x38
 8001796:	2100      	movs	r1, #0
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_ETH_Init+0x98>)
 800179a:	f002 fe3b 	bl	8004414 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_ETH_Init+0x98>)
 80017a0:	2221      	movs	r2, #33	; 0x21
 80017a2:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_ETH_Init+0x98>)
 80017a6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80017aa:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_ETH_Init+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001a0 	.word	0x200001a0
 80017bc:	40028000 	.word	0x40028000
 80017c0:	200007a0 	.word	0x200007a0
 80017c4:	20000100 	.word	0x20000100
 80017c8:	20000060 	.word	0x20000060
 80017cc:	20000028 	.word	0x20000028

080017d0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART3_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART3_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART3_UART_Init+0x4c>)
 8001808:	f001 ff02 	bl	8003610 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001812:	f000 f8e3 	bl	80019dc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000250 	.word	0x20000250
 8001820:	40004800 	.word	0x40004800

08001824 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800182e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001832:	2204      	movs	r2, #4
 8001834:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001838:	2202      	movs	r2, #2
 800183a:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001844:	2202      	movs	r2, #2
 8001846:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184a:	2201      	movs	r2, #1
 800184c:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185c:	2201      	movs	r2, #1
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001868:	f001 f91d 	bl	8002aa6 <HAL_PCD_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001872:	f000 f8b3 	bl	80019dc <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000294 	.word	0x20000294

08001880 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <MX_GPIO_Init+0x14c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4b45      	ldr	r3, [pc, #276]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a44      	ldr	r2, [pc, #272]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b42      	ldr	r3, [pc, #264]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a36      	ldr	r2, [pc, #216]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b34      	ldr	r3, [pc, #208]	; (80019cc <MX_GPIO_Init+0x14c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <MX_GPIO_Init+0x14c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a2f      	ldr	r2, [pc, #188]	; (80019cc <MX_GPIO_Init+0x14c>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <MX_GPIO_Init+0x14c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <MX_GPIO_Init+0x14c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a28      	ldr	r2, [pc, #160]	; (80019cc <MX_GPIO_Init+0x14c>)
 800192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <MX_GPIO_Init+0x14c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f244 0181 	movw	r1, #16513	; 0x4081
 8001944:	4822      	ldr	r0, [pc, #136]	; (80019d0 <MX_GPIO_Init+0x150>)
 8001946:	f001 f895 	bl	8002a74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800194a:	2200      	movs	r2, #0
 800194c:	2140      	movs	r1, #64	; 0x40
 800194e:	4821      	ldr	r0, [pc, #132]	; (80019d4 <MX_GPIO_Init+0x154>)
 8001950:	f001 f890 	bl	8002a74 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001958:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800195a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800195e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	481b      	ldr	r0, [pc, #108]	; (80019d8 <MX_GPIO_Init+0x158>)
 800196c:	f000 fed6 	bl	800271c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001970:	f244 0381 	movw	r3, #16513	; 0x4081
 8001974:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	4811      	ldr	r0, [pc, #68]	; (80019d0 <MX_GPIO_Init+0x150>)
 800198a:	f000 fec7 	bl	800271c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800198e:	2340      	movs	r3, #64	; 0x40
 8001990:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <MX_GPIO_Init+0x154>)
 80019a6:	f000 feb9 	bl	800271c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_GPIO_Init+0x154>)
 80019be:	f000 fead 	bl	800271c <HAL_GPIO_Init>

}
 80019c2:	bf00      	nop
 80019c4:	3730      	adds	r7, #48	; 0x30
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40020800 	.word	0x40020800

080019dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08e      	sub	sp, #56	; 0x38
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a55      	ldr	r2, [pc, #340]	; (8001bac <HAL_ETH_MspInit+0x174>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	f040 80a4 	bne.w	8001ba4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a4b      	ldr	r2, [pc, #300]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4a36      	ldr	r2, [pc, #216]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6313      	str	r3, [r2, #48]	; 0x30
 8001adc:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_ETH_MspInit+0x178>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b20:	2332      	movs	r3, #50	; 0x32
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b30:	230b      	movs	r3, #11
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481e      	ldr	r0, [pc, #120]	; (8001bb4 <HAL_ETH_MspInit+0x17c>)
 8001b3c:	f000 fdee 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b40:	2386      	movs	r3, #134	; 0x86
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b50:	230b      	movs	r3, #11
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <HAL_ETH_MspInit+0x180>)
 8001b5c:	f000 fdde 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b72:	230b      	movs	r3, #11
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480f      	ldr	r0, [pc, #60]	; (8001bbc <HAL_ETH_MspInit+0x184>)
 8001b7e:	f000 fdcd 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b94:	230b      	movs	r3, #11
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <HAL_ETH_MspInit+0x188>)
 8001ba0:	f000 fdbc 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3738      	adds	r7, #56	; 0x38
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40028000 	.word	0x40028000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40021800 	.word	0x40021800

08001bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_UART_MspInit+0x84>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12c      	bne.n	8001c40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_UART_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_UART_MspInit+0x88>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_UART_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_UART_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <HAL_UART_MspInit+0x88>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_UART_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c30:	2307      	movs	r3, #7
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HAL_UART_MspInit+0x8c>)
 8001c3c:	f000 fd6e 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40004800 	.word	0x40004800
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020c00 	.word	0x40020c00

08001c54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c74:	d13f      	bne.n	8001cf6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	4815      	ldr	r0, [pc, #84]	; (8001d04 <HAL_PCD_MspInit+0xb0>)
 8001cb0:	f000 fd34 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480e      	ldr	r0, [pc, #56]	; (8001d04 <HAL_PCD_MspInit+0xb0>)
 8001cca:	f000 fd27 	bl	800271c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd8:	6353      	str	r3, [r2, #52]	; 0x34
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_PCD_MspInit+0xac>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <NMI_Handler+0x4>

08001d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001d2c:	f3ef 8314 	mrs	r3, CONTROL
 8001d30:	607b      	str	r3, [r7, #4]
  return(result);
 8001d32:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001d34:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f383 8814 	msr	CONTROL, r3
}
 8001d48:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d76:	f000 f893 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001da4:	bf00      	nop
  nop
 8001da6:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dae:	490e      	ldr	r1, [pc, #56]	; (8001de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc4:	4c0b      	ldr	r4, [pc, #44]	; (8001df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dd2:	f7ff ffd5 	bl	8001d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f002 fadf 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dda:	f7fe feaf 	bl	8000b3c <main>
  bx  lr    
 8001dde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001de0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dec:	08004850 	.word	0x08004850
  ldr r2, =_sbss
 8001df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001df4:	200007ac 	.word	0x200007ac

08001df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_Init+0x40>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_Init+0x40>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_Init+0x40>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f931 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f000 f808 	bl	8001e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fdda 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x54>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x58>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f93b 	bl	80020da <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00e      	b.n	8001e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d80a      	bhi.n	8001e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f000 f911 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e80:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <HAL_InitTick+0x5c>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e000      	b.n	8001e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	200007a8 	.word	0x200007a8

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_GetTick+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	200007a8 	.word	0x200007a8

08001ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff ffee 	bl	8001ec8 <HAL_GetTick>
 8001eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d005      	beq.n	8001f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_Delay+0x44>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f06:	bf00      	nop
 8001f08:	f7ff ffde 	bl	8001ec8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d8f7      	bhi.n	8001f08 <HAL_Delay+0x28>
  {
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000008 	.word	0x20000008

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff47 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff5c 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffb0 	bl	8002048 <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06c      	b.n	80021e0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2223      	movs	r2, #35	; 0x23
 8002114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fc8d 	bl	8001a38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_ETH_Init+0xf4>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a30      	ldr	r2, [pc, #192]	; (80021e8 <HAL_ETH_Init+0xf4>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_ETH_Init+0xf4>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_ETH_Init+0xf8>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a2b      	ldr	r2, [pc, #172]	; (80021ec <HAL_ETH_Init+0xf8>)
 8002140:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002144:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_ETH_Init+0xf8>)
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4927      	ldr	r1, [pc, #156]	; (80021ec <HAL_ETH_Init+0xf8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_ETH_Init+0xf8>)
 8002156:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800216e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002170:	f7ff feaa 	bl	8001ec8 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002176:	e011      	b.n	800219c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002178:	f7ff fea6 	bl	8001ec8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002186:	d909      	bls.n	800219c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2204      	movs	r2, #4
 800218c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	22e0      	movs	r2, #224	; 0xe0
 8002194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e021      	b.n	80021e0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e4      	bne.n	8002178 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f944 	bl	800243c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f9eb 	bl	8002590 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa41 	bl	8002642 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f9a9 	bl	8002520 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2210      	movs	r2, #16
 80021da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40013800 	.word	0x40013800

080021f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4b47      	ldr	r3, [pc, #284]	; (8002324 <ETH_SetMACConfig+0x134>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7c1b      	ldrb	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <ETH_SetMACConfig+0x28>
 8002212:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002216:	e000      	b.n	800221a <ETH_SetMACConfig+0x2a>
 8002218:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7c5b      	ldrb	r3, [r3, #17]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <ETH_SetMACConfig+0x38>
 8002222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002226:	e000      	b.n	800222a <ETH_SetMACConfig+0x3a>
 8002228:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800222a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002230:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	7fdb      	ldrb	r3, [r3, #31]
 8002236:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002238:	431a      	orrs	r2, r3
                        macconf->Speed |
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800223e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	7f92      	ldrb	r2, [r2, #30]
 8002244:	2a00      	cmp	r2, #0
 8002246:	d102      	bne.n	800224e <ETH_SetMACConfig+0x5e>
 8002248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224c:	e000      	b.n	8002250 <ETH_SetMACConfig+0x60>
 800224e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002250:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	7f1b      	ldrb	r3, [r3, #28]
 8002256:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002258:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800225e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	791b      	ldrb	r3, [r3, #4]
 8002264:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002266:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800226e:	2a00      	cmp	r2, #0
 8002270:	d102      	bne.n	8002278 <ETH_SetMACConfig+0x88>
 8002272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002276:	e000      	b.n	800227a <ETH_SetMACConfig+0x8a>
 8002278:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800227a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	7bdb      	ldrb	r3, [r3, #15]
 8002280:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002282:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002288:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002290:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002292:	4313      	orrs	r3, r2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff fe18 	bl	8001ee0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022c6:	4013      	ands	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022d6:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80022dc:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80022e4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80022ec:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022f4:	4313      	orrs	r3, r2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff fde7 	bl	8001ee0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	ff20810f 	.word	0xff20810f

08002328 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <ETH_SetDMAConfig+0x110>)
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	7b1b      	ldrb	r3, [r3, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <ETH_SetDMAConfig+0x2c>
 800234e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002352:	e000      	b.n	8002356 <ETH_SetDMAConfig+0x2e>
 8002354:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	7b5b      	ldrb	r3, [r3, #13]
 800235a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800235c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	7f52      	ldrb	r2, [r2, #29]
 8002362:	2a00      	cmp	r2, #0
 8002364:	d102      	bne.n	800236c <ETH_SetDMAConfig+0x44>
 8002366:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800236a:	e000      	b.n	800236e <ETH_SetDMAConfig+0x46>
 800236c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800236e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	7b9b      	ldrb	r3, [r3, #14]
 8002374:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002376:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800237c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	7f1b      	ldrb	r3, [r3, #28]
 8002382:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002384:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	7f9b      	ldrb	r3, [r3, #30]
 800238a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800238c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002392:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800239c:	4313      	orrs	r3, r2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	461a      	mov	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023be:	2001      	movs	r0, #1
 80023c0:	f7ff fd8e 	bl	8001ee0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023cc:	461a      	mov	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	791b      	ldrb	r3, [r3, #4]
 80023d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002400:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800240a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800240e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff fd5f 	bl	8001ee0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	f8de3f23 	.word	0xf8de3f23

0800243c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0a6      	sub	sp, #152	; 0x98
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002450:	2300      	movs	r3, #0
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800245a:	2301      	movs	r3, #1
 800245c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002478:	2300      	movs	r3, #0
 800247a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002482:	2300      	movs	r3, #0
 8002484:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800249e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fe9a 	bl	80021f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024bc:	2301      	movs	r3, #1
 80024be:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff08 	bl	8002328 <ETH_SetDMAConfig>
}
 8002518:	bf00      	nop
 800251a:	3798      	adds	r7, #152	; 0x98
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3305      	adds	r3, #5
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	3204      	adds	r2, #4
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <ETH_MACAddressConfig+0x68>)
 8002542:	4413      	add	r3, r2
 8002544:	461a      	mov	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3303      	adds	r3, #3
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	061a      	lsls	r2, r3, #24
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3302      	adds	r3, #2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3301      	adds	r3, #1
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	4313      	orrs	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <ETH_MACAddressConfig+0x6c>)
 8002572:	4413      	add	r3, r2
 8002574:	461a      	mov	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	6013      	str	r3, [r2, #0]
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40028040 	.word	0x40028040
 800258c:	40028044 	.word	0x40028044

08002590 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e03e      	b.n	800261c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68d9      	ldr	r1, [r3, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	3206      	adds	r2, #6
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d80c      	bhi.n	8002600 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	440b      	add	r3, r1
 80025f8:	461a      	mov	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	e004      	b.n	800260a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3301      	adds	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d9bd      	bls.n	800259e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002634:	611a      	str	r2, [r3, #16]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002642:	b480      	push	{r7}
 8002644:	b085      	sub	sp, #20
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e046      	b.n	80026de <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6919      	ldr	r1, [r3, #16]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800268c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002694:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	3212      	adds	r2, #18
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d80c      	bhi.n	80026ce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6919      	ldr	r1, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	e004      	b.n	80026d8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3301      	adds	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d9b5      	bls.n	8002650 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270e:	60da      	str	r2, [r3, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e177      	b.n	8002a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8166 	bne.w	8002a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d005      	beq.n	800276e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	2b02      	cmp	r3, #2
 800276c:	d130      	bne.n	80027d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0201 	and.w	r2, r3, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d017      	beq.n	800280c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80c0 	beq.w	8002a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_GPIO_Init+0x324>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a65      	ldr	r2, [pc, #404]	; (8002a40 <HAL_GPIO_Init+0x324>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <HAL_GPIO_Init+0x324>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028be:	4a61      	ldr	r2, [pc, #388]	; (8002a44 <HAL_GPIO_Init+0x328>)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_GPIO_Init+0x32c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d037      	beq.n	800295a <HAL_GPIO_Init+0x23e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a57      	ldr	r2, [pc, #348]	; (8002a4c <HAL_GPIO_Init+0x330>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_GPIO_Init+0x23a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <HAL_GPIO_Init+0x334>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d02b      	beq.n	8002952 <HAL_GPIO_Init+0x236>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a55      	ldr	r2, [pc, #340]	; (8002a54 <HAL_GPIO_Init+0x338>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d025      	beq.n	800294e <HAL_GPIO_Init+0x232>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a54      	ldr	r2, [pc, #336]	; (8002a58 <HAL_GPIO_Init+0x33c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01f      	beq.n	800294a <HAL_GPIO_Init+0x22e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a53      	ldr	r2, [pc, #332]	; (8002a5c <HAL_GPIO_Init+0x340>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d019      	beq.n	8002946 <HAL_GPIO_Init+0x22a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_GPIO_Init+0x344>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_GPIO_Init+0x226>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a51      	ldr	r2, [pc, #324]	; (8002a64 <HAL_GPIO_Init+0x348>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_GPIO_Init+0x222>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a50      	ldr	r2, [pc, #320]	; (8002a68 <HAL_GPIO_Init+0x34c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <HAL_GPIO_Init+0x21e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <HAL_GPIO_Init+0x350>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_GPIO_Init+0x21a>
 8002932:	2309      	movs	r3, #9
 8002934:	e012      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002936:	230a      	movs	r3, #10
 8002938:	e010      	b.n	800295c <HAL_GPIO_Init+0x240>
 800293a:	2308      	movs	r3, #8
 800293c:	e00e      	b.n	800295c <HAL_GPIO_Init+0x240>
 800293e:	2307      	movs	r3, #7
 8002940:	e00c      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002942:	2306      	movs	r3, #6
 8002944:	e00a      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002946:	2305      	movs	r3, #5
 8002948:	e008      	b.n	800295c <HAL_GPIO_Init+0x240>
 800294a:	2304      	movs	r3, #4
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x240>
 800294e:	2303      	movs	r3, #3
 8002950:	e004      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002952:	2302      	movs	r3, #2
 8002954:	e002      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_GPIO_Init+0x240>
 800295a:	2300      	movs	r3, #0
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f002 0203 	and.w	r2, r2, #3
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	4093      	lsls	r3, r2
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296c:	4935      	ldr	r1, [pc, #212]	; (8002a44 <HAL_GPIO_Init+0x328>)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_GPIO_Init+0x354>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <HAL_GPIO_Init+0x354>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a4:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <HAL_GPIO_Init+0x354>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c8:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_GPIO_Init+0x354>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ce:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <HAL_GPIO_Init+0x354>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f2:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_GPIO_Init+0x354>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_GPIO_Init+0x354>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <HAL_GPIO_Init+0x354>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f67f ae84 	bls.w	8002738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40013800 	.word	0x40013800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020800 	.word	0x40020800
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40021400 	.word	0x40021400
 8002a60:	40021800 	.word	0x40021800
 8002a64:	40021c00 	.word	0x40021c00
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40022400 	.word	0x40022400
 8002a70:	40013c00 	.word	0x40013c00

08002a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
 8002a80:	4613      	mov	r3, r2
 8002a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a90:	e003      	b.n	8002a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	041a      	lsls	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	619a      	str	r2, [r3, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa8:	b08f      	sub	sp, #60	; 0x3c
 8002aaa:	af0a      	add	r7, sp, #40	; 0x28
 8002aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e10f      	b.n	8002cd8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff f8be 	bl	8001c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f9ad 	bl	8003e56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	687e      	ldr	r6, [r7, #4]
 8002b04:	466d      	mov	r5, sp
 8002b06:	f106 0410 	add.w	r4, r6, #16
 8002b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b1a:	1d33      	adds	r3, r6, #4
 8002b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b1e:	6838      	ldr	r0, [r7, #0]
 8002b20:	f001 f938 	bl	8003d94 <USB_CoreInit>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0d0      	b.n	8002cd8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 f99b 	bl	8003e78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e04a      	b.n	8002bde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	333d      	adds	r3, #61	; 0x3d
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	333c      	adds	r3, #60	; 0x3c
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	b298      	uxth	r0, r3
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3344      	adds	r3, #68	; 0x44
 8002b84:	4602      	mov	r2, r0
 8002b86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3340      	adds	r3, #64	; 0x40
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3348      	adds	r3, #72	; 0x48
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	334c      	adds	r3, #76	; 0x4c
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3354      	adds	r3, #84	; 0x54
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3af      	bcc.n	8002b48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	e044      	b.n	8002c78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	3301      	adds	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d3b5      	bcc.n	8002bee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	687e      	ldr	r6, [r7, #4]
 8002c8a:	466d      	mov	r5, sp
 8002c8c:	f106 0410 	add.w	r4, r6, #16
 8002c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ca0:	1d33      	adds	r3, r6, #4
 8002ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	f001 f933 	bl	8003f10 <USB_DevInit>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e00d      	b.n	8002cd8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fafe 	bl	80042d2 <USB_DevDisconnect>

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e267      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d075      	beq.n	8002dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfe:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d00c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d22:	d10b      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d05b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x108>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d157      	bne.n	8002de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e242      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d106      	bne.n	8002d54 <HAL_RCC_OscConfig+0x74>
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a75      	ldr	r2, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xb0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x98>
 8002d5e:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6f      	ldr	r2, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6c      	ldr	r2, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xb0>
 8002d78:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a68      	ldr	r2, [pc, #416]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a65      	ldr	r2, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff f896 	bl	8001ec8 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff f892 	bl	8001ec8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e207      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xc0>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f882 	bl	8001ec8 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff f87e 	bl	8001ec8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1f3      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xe8>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x152>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1c7      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_RCC_OscConfig+0x244>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7ff f837 	bl	8001ec8 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7ff f833 	bl	8001ec8 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1a8      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4925      	ldr	r1, [pc, #148]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x244>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff f816 	bl	8001ec8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7ff f812 	bl	8001ec8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e187      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d036      	beq.n	8002f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_RCC_OscConfig+0x248>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fff6 	bl	8001ec8 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fff2 	bl	8001ec8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e167      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x200>
 8002efe:	e01b      	b.n	8002f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x248>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f06:	f7fe ffdf 	bl	8001ec8 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	e00e      	b.n	8002f2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe ffdb 	bl	8001ec8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d907      	bls.n	8002f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e150      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	42470000 	.word	0x42470000
 8002f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	4b88      	ldr	r3, [pc, #544]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ea      	bne.n	8002f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8097 	beq.w	8003074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b81      	ldr	r3, [pc, #516]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a7c      	ldr	r2, [pc, #496]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b77      	ldr	r3, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d118      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4b74      	ldr	r3, [pc, #464]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a73      	ldr	r2, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe ff9b 	bl	8001ec8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7fe ff97 	bl	8001ec8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e10c      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x474>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x2ea>
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a63      	ldr	r2, [pc, #396]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	e01c      	b.n	8003004 <HAL_RCC_OscConfig+0x324>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x30c>
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a5e      	ldr	r2, [pc, #376]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	4b5c      	ldr	r3, [pc, #368]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a5b      	ldr	r2, [pc, #364]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0x324>
 8002fec:	4b58      	ldr	r3, [pc, #352]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a57      	ldr	r2, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 0304 	bic.w	r3, r3, #4
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fe ff5c 	bl	8001ec8 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003012:	e00a      	b.n	800302a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fe ff58 	bl	8001ec8 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0cb      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0ee      	beq.n	8003014 <HAL_RCC_OscConfig+0x334>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe ff46 	bl	8001ec8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7fe ff42 	bl	8001ec8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e0b5      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ee      	bne.n	8003040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003072:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a1 	beq.w	80031c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307e:	4b34      	ldr	r3, [pc, #208]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b08      	cmp	r3, #8
 8003088:	d05c      	beq.n	8003144 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d141      	bne.n	8003116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe ff16 	bl	8001ec8 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe ff12 	bl	8001ec8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e087      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	019b      	lsls	r3, r3, #6
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	3b01      	subs	r3, #1
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	491b      	ldr	r1, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe feeb 	bl	8001ec8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe fee7 	bl	8001ec8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e05c      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x416>
 8003114:	e054      	b.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCC_OscConfig+0x478>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fed4 	bl	8001ec8 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe fed0 	bl	8001ec8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e045      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_OscConfig+0x470>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x444>
 8003142:	e03d      	b.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e038      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000
 8003158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x4ec>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d028      	beq.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d121      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d11a      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	4293      	cmp	r3, r2
 8003196:	d111      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	3b01      	subs	r3, #1
 80031a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0cc      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d90c      	bls.n	800320c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d044      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d119      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d003      	beq.n	800328e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	2b03      	cmp	r3, #3
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e067      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4934      	ldr	r1, [pc, #208]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fe02 	bl	8001ec8 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe fdfe 	bl	8001ec8 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e04f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d20c      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fd62 	bl	8001e40 <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00
 800338c:	40023800 	.word	0x40023800
 8003390:	08004800 	.word	0x08004800
 8003394:	20000000 	.word	0x20000000
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b094      	sub	sp, #80	; 0x50
 80033a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	647b      	str	r3, [r7, #68]	; 0x44
 80033a8:	2300      	movs	r3, #0
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ac:	2300      	movs	r3, #0
 80033ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b4:	4b79      	ldr	r3, [pc, #484]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d00d      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x40>
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	f200 80e1 	bhi.w	8003588 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ce:	e0db      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033d4:	e0db      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80033d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033da:	e0d8      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033dc:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e6:	4b6d      	ldr	r3, [pc, #436]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d063      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	2200      	movs	r2, #0
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80033fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
 8003406:	2300      	movs	r3, #0
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
 800340a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800340e:	4622      	mov	r2, r4
 8003410:	462b      	mov	r3, r5
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	0159      	lsls	r1, r3, #5
 800341c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003420:	0150      	lsls	r0, r2, #5
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4621      	mov	r1, r4
 8003428:	1a51      	subs	r1, r2, r1
 800342a:	6139      	str	r1, [r7, #16]
 800342c:	4629      	mov	r1, r5
 800342e:	eb63 0301 	sbc.w	r3, r3, r1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003440:	4659      	mov	r1, fp
 8003442:	018b      	lsls	r3, r1, #6
 8003444:	4651      	mov	r1, sl
 8003446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344a:	4651      	mov	r1, sl
 800344c:	018a      	lsls	r2, r1, #6
 800344e:	4651      	mov	r1, sl
 8003450:	ebb2 0801 	subs.w	r8, r2, r1
 8003454:	4659      	mov	r1, fp
 8003456:	eb63 0901 	sbc.w	r9, r3, r1
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800346e:	4690      	mov	r8, r2
 8003470:	4699      	mov	r9, r3
 8003472:	4623      	mov	r3, r4
 8003474:	eb18 0303 	adds.w	r3, r8, r3
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	462b      	mov	r3, r5
 800347c:	eb49 0303 	adc.w	r3, r9, r3
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800348e:	4629      	mov	r1, r5
 8003490:	024b      	lsls	r3, r1, #9
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003498:	4621      	mov	r1, r4
 800349a:	024a      	lsls	r2, r1, #9
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	2200      	movs	r2, #0
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ac:	f7fc ff84 	bl	80003b8 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b8:	e058      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ba:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	099b      	lsrs	r3, r3, #6
 80034c0:	2200      	movs	r2, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	4611      	mov	r1, r2
 80034c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ca:	623b      	str	r3, [r7, #32]
 80034cc:	2300      	movs	r3, #0
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d4:	4642      	mov	r2, r8
 80034d6:	464b      	mov	r3, r9
 80034d8:	f04f 0000 	mov.w	r0, #0
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	0159      	lsls	r1, r3, #5
 80034e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e6:	0150      	lsls	r0, r2, #5
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4641      	mov	r1, r8
 80034ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80034f2:	4649      	mov	r1, r9
 80034f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800350c:	ebb2 040a 	subs.w	r4, r2, sl
 8003510:	eb63 050b 	sbc.w	r5, r3, fp
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	00eb      	lsls	r3, r5, #3
 800351e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003522:	00e2      	lsls	r2, r4, #3
 8003524:	4614      	mov	r4, r2
 8003526:	461d      	mov	r5, r3
 8003528:	4643      	mov	r3, r8
 800352a:	18e3      	adds	r3, r4, r3
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	464b      	mov	r3, r9
 8003530:	eb45 0303 	adc.w	r3, r5, r3
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003542:	4629      	mov	r1, r5
 8003544:	028b      	lsls	r3, r1, #10
 8003546:	4621      	mov	r1, r4
 8003548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800354c:	4621      	mov	r1, r4
 800354e:	028a      	lsls	r2, r1, #10
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	2200      	movs	r2, #0
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	61fa      	str	r2, [r7, #28]
 800355c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003560:	f7fc ff2a 	bl	80003b8 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_GetSysClockFreq+0x200>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800357c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800357e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003586:	e002      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800358c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003590:	4618      	mov	r0, r3
 8003592:	3750      	adds	r7, #80	; 0x50
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	007a1200 	.word	0x007a1200

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000000 	.word	0x20000000

080035c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c4:	f7ff fff0 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0a9b      	lsrs	r3, r3, #10
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4903      	ldr	r1, [pc, #12]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	08004810 	.word	0x08004810

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035ec:	f7ff ffdc 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0b5b      	lsrs	r3, r3, #13
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08004810 	.word	0x08004810

08003610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e03f      	b.n	80036a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe fac4 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f929 	bl	80038ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b08a      	sub	sp, #40	; 0x28
 80036ae:	af02      	add	r7, sp, #8
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d17c      	bne.n	80037c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_Transmit+0x2c>
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e075      	b.n	80037c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_UART_Transmit+0x3e>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e06e      	b.n	80037c6 <HAL_UART_Transmit+0x11c>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2221      	movs	r2, #33	; 0x21
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036fe:	f7fe fbe3 	bl	8001ec8 <HAL_GetTick>
 8003702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	88fa      	ldrh	r2, [r7, #6]
 800370e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d108      	bne.n	800372c <HAL_UART_Transmit+0x82>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e003      	b.n	8003734 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800373c:	e02a      	b.n	8003794 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f840 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e036      	b.n	80037c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800376c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	3302      	adds	r3, #2
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e007      	b.n	8003786 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	3301      	adds	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1cf      	bne.n	800373e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f810 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e006      	b.n	80037c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b090      	sub	sp, #64	; 0x40
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037de:	e050      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d04c      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0x30>
 80037ee:	f7fe fb6b 	bl	8001ec8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d241      	bcs.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800381e:	637a      	str	r2, [r7, #52]	; 0x34
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	613b      	str	r3, [r7, #16]
   return(result);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003852:	623a      	str	r2, [r7, #32]
 8003854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	69f9      	ldr	r1, [r7, #28]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e5      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e00f      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	429a      	cmp	r2, r3
 800389e:	d09f      	beq.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3740      	adds	r7, #64	; 0x40
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b0:	b0c0      	sub	sp, #256	; 0x100
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	68d9      	ldr	r1, [r3, #12]
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	ea40 0301 	orr.w	r3, r0, r1
 80038d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003904:	f021 010c 	bic.w	r1, r1, #12
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003912:	430b      	orrs	r3, r1
 8003914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003926:	6999      	ldr	r1, [r3, #24]
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	ea40 0301 	orr.w	r3, r0, r1
 8003932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <UART_SetConfig+0x2cc>)
 800393c:	429a      	cmp	r2, r3
 800393e:	d005      	beq.n	800394c <UART_SetConfig+0xa0>
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <UART_SetConfig+0x2d0>)
 8003948:	429a      	cmp	r2, r3
 800394a:	d104      	bne.n	8003956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7ff fe4c 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8003950:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003954:	e003      	b.n	800395e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003956:	f7ff fe33 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 800395a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003968:	f040 810c 	bne.w	8003b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800396c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003976:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800397a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800397e:	4622      	mov	r2, r4
 8003980:	462b      	mov	r3, r5
 8003982:	1891      	adds	r1, r2, r2
 8003984:	65b9      	str	r1, [r7, #88]	; 0x58
 8003986:	415b      	adcs	r3, r3
 8003988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800398a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800398e:	4621      	mov	r1, r4
 8003990:	eb12 0801 	adds.w	r8, r2, r1
 8003994:	4629      	mov	r1, r5
 8003996:	eb43 0901 	adc.w	r9, r3, r1
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ae:	4690      	mov	r8, r2
 80039b0:	4699      	mov	r9, r3
 80039b2:	4623      	mov	r3, r4
 80039b4:	eb18 0303 	adds.w	r3, r8, r3
 80039b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039bc:	462b      	mov	r3, r5
 80039be:	eb49 0303 	adc.w	r3, r9, r3
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039da:	460b      	mov	r3, r1
 80039dc:	18db      	adds	r3, r3, r3
 80039de:	653b      	str	r3, [r7, #80]	; 0x50
 80039e0:	4613      	mov	r3, r2
 80039e2:	eb42 0303 	adc.w	r3, r2, r3
 80039e6:	657b      	str	r3, [r7, #84]	; 0x54
 80039e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039f0:	f7fc fce2 	bl	80003b8 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <UART_SetConfig+0x2d4>)
 80039fa:	fba3 2302 	umull	r2, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	011c      	lsls	r4, r3, #4
 8003a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	1891      	adds	r1, r2, r2
 8003a1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a1c:	415b      	adcs	r3, r3
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a24:	4641      	mov	r1, r8
 8003a26:	eb12 0a01 	adds.w	sl, r2, r1
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a44:	4692      	mov	sl, r2
 8003a46:	469b      	mov	fp, r3
 8003a48:	4643      	mov	r3, r8
 8003a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a52:	464b      	mov	r3, r9
 8003a54:	eb4b 0303 	adc.w	r3, fp, r3
 8003a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a70:	460b      	mov	r3, r1
 8003a72:	18db      	adds	r3, r3, r3
 8003a74:	643b      	str	r3, [r7, #64]	; 0x40
 8003a76:	4613      	mov	r3, r2
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a86:	f7fc fc97 	bl	80003b8 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003a92:	fba3 2301 	umull	r2, r3, r3, r1
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2264      	movs	r2, #100	; 0x64
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	1acb      	subs	r3, r1, r3
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aa6:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab4:	441c      	add	r4, r3
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	1891      	adds	r1, r2, r2
 8003ace:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ad0:	415b      	adcs	r3, r3
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ad8:	4641      	mov	r1, r8
 8003ada:	1851      	adds	r1, r2, r1
 8003adc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ade:	4649      	mov	r1, r9
 8003ae0:	414b      	adcs	r3, r1
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003af0:	4659      	mov	r1, fp
 8003af2:	00cb      	lsls	r3, r1, #3
 8003af4:	4651      	mov	r1, sl
 8003af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afa:	4651      	mov	r1, sl
 8003afc:	00ca      	lsls	r2, r1, #3
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	4642      	mov	r2, r8
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	460a      	mov	r2, r1
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	18db      	adds	r3, r3, r3
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b32:	4613      	mov	r3, r2
 8003b34:	eb42 0303 	adc.w	r3, r2, r3
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b42:	f7fc fc39 	bl	80003b8 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 0207 	and.w	r2, r3, #7
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4422      	add	r2, r4
 8003b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b74:	e105      	b.n	8003d82 <UART_SetConfig+0x4d6>
 8003b76:	bf00      	nop
 8003b78:	40011000 	.word	0x40011000
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b96:	4642      	mov	r2, r8
 8003b98:	464b      	mov	r3, r9
 8003b9a:	1891      	adds	r1, r2, r2
 8003b9c:	6239      	str	r1, [r7, #32]
 8003b9e:	415b      	adcs	r3, r3
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	1854      	adds	r4, r2, r1
 8003baa:	4649      	mov	r1, r9
 8003bac:	eb43 0501 	adc.w	r5, r3, r1
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	00eb      	lsls	r3, r5, #3
 8003bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bbe:	00e2      	lsls	r2, r4, #3
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	4643      	mov	r3, r8
 8003bc6:	18e3      	adds	r3, r4, r3
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bcc:	464b      	mov	r3, r9
 8003bce:	eb45 0303 	adc.w	r3, r5, r3
 8003bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003be2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	008b      	lsls	r3, r1, #2
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	008a      	lsls	r2, r1, #2
 8003c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c04:	f7fc fbd8 	bl	80003b8 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4b60      	ldr	r3, [pc, #384]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	011c      	lsls	r4, r3, #4
 8003c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c28:	4642      	mov	r2, r8
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	1891      	adds	r1, r2, r2
 8003c2e:	61b9      	str	r1, [r7, #24]
 8003c30:	415b      	adcs	r3, r3
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c38:	4641      	mov	r1, r8
 8003c3a:	1851      	adds	r1, r2, r1
 8003c3c:	6139      	str	r1, [r7, #16]
 8003c3e:	4649      	mov	r1, r9
 8003c40:	414b      	adcs	r3, r1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c50:	4659      	mov	r1, fp
 8003c52:	00cb      	lsls	r3, r1, #3
 8003c54:	4651      	mov	r1, sl
 8003c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	00ca      	lsls	r2, r1, #3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	4642      	mov	r2, r8
 8003c66:	189b      	adds	r3, r3, r2
 8003c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	460a      	mov	r2, r1
 8003c70:	eb42 0303 	adc.w	r3, r2, r3
 8003c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c90:	4649      	mov	r1, r9
 8003c92:	008b      	lsls	r3, r1, #2
 8003c94:	4641      	mov	r1, r8
 8003c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	008a      	lsls	r2, r1, #2
 8003c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ca2:	f7fc fb89 	bl	80003b8 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	3332      	adds	r3, #50	; 0x32
 8003cbe:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cca:	441c      	add	r4, r3
 8003ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd4:	677a      	str	r2, [r7, #116]	; 0x74
 8003cd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cda:	4642      	mov	r2, r8
 8003cdc:	464b      	mov	r3, r9
 8003cde:	1891      	adds	r1, r2, r2
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	415b      	adcs	r3, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cea:	4641      	mov	r1, r8
 8003cec:	1851      	adds	r1, r2, r1
 8003cee:	6039      	str	r1, [r7, #0]
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	414b      	adcs	r3, r1
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d02:	4659      	mov	r1, fp
 8003d04:	00cb      	lsls	r3, r1, #3
 8003d06:	4651      	mov	r1, sl
 8003d08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	00ca      	lsls	r2, r1, #3
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	4603      	mov	r3, r0
 8003d16:	4642      	mov	r2, r8
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	460a      	mov	r2, r1
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d30:	667a      	str	r2, [r7, #100]	; 0x64
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d3e:	4649      	mov	r1, r9
 8003d40:	008b      	lsls	r3, r1, #2
 8003d42:	4641      	mov	r1, r8
 8003d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d48:	4641      	mov	r1, r8
 8003d4a:	008a      	lsls	r2, r1, #2
 8003d4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d50:	f7fc fb32 	bl	80003b8 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2164      	movs	r1, #100	; 0x64
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	3332      	adds	r3, #50	; 0x32
 8003d6c:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <UART_SetConfig+0x4e4>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4422      	add	r2, r4
 8003d80:	609a      	str	r2, [r3, #8]
}
 8003d82:	bf00      	nop
 8003d84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d8e:	bf00      	nop
 8003d90:	51eb851f 	.word	0x51eb851f

08003d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d94:	b084      	sub	sp, #16
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	f107 001c 	add.w	r0, r7, #28
 8003da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d122      	bne.n	8003df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 faa2 	bl	8004330 <USB_CoreReset>
 8003dec:	4603      	mov	r3, r0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e01a      	b.n	8003e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa96 	bl	8004330 <USB_CoreReset>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
 8003e1a:	e005      	b.n	8003e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10b      	bne.n	8003e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f043 0206 	orr.w	r2, r3, #6
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e52:	b004      	add	sp, #16
 8003e54:	4770      	bx	lr

08003e56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 0201 	bic.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d115      	bne.n	8003ec6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f7fe f81a 	bl	8001ee0 <HAL_Delay>
      ms++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa2e 	bl	8004314 <USB_GetMode>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d01e      	beq.n	8003efc <USB_SetCurrentMode+0x84>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b31      	cmp	r3, #49	; 0x31
 8003ec2:	d9f0      	bls.n	8003ea6 <USB_SetCurrentMode+0x2e>
 8003ec4:	e01a      	b.n	8003efc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d115      	bne.n	8003ef8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7fe f801 	bl	8001ee0 <HAL_Delay>
      ms++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fa15 	bl	8004314 <USB_GetMode>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <USB_SetCurrentMode+0x84>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b31      	cmp	r3, #49	; 0x31
 8003ef4:	d9f0      	bls.n	8003ed8 <USB_SetCurrentMode+0x60>
 8003ef6:	e001      	b.n	8003efc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e005      	b.n	8003f08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b32      	cmp	r3, #50	; 0x32
 8003f00:	d101      	bne.n	8003f06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f10:	b084      	sub	sp, #16
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e009      	b.n	8003f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	3340      	adds	r3, #64	; 0x40
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	3301      	adds	r3, #1
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b0e      	cmp	r3, #14
 8003f48:	d9f2      	bls.n	8003f30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11c      	bne.n	8003f8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f5e:	f043 0302 	orr.w	r3, r3, #2
 8003f62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
 8003f88:	e00b      	b.n	8003fa2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2300      	movs	r3, #0
 8003fac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	680b      	ldr	r3, [r1, #0]
 8003fc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d10c      	bne.n	8003fe2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fce:	2100      	movs	r1, #0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f965 	bl	80042a0 <USB_SetDevSpeed>
 8003fd6:	e008      	b.n	8003fea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fd8:	2101      	movs	r1, #1
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f960 	bl	80042a0 <USB_SetDevSpeed>
 8003fe0:	e003      	b.n	8003fea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fe2:	2103      	movs	r1, #3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f95b 	bl	80042a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fea:	2110      	movs	r1, #16
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8f3 	bl	80041d8 <USB_FlushTxFifo>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f91f 	bl	8004240 <USB_FlushRxFifo>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004012:	461a      	mov	r2, r3
 8004014:	2300      	movs	r3, #0
 8004016:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	461a      	mov	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	e043      	b.n	80040be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800404c:	d118      	bne.n	8004080 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	461a      	mov	r2, r3
 8004062:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e013      	b.n	8004092 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	461a      	mov	r2, r3
 8004078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e008      	b.n	8004092 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	461a      	mov	r2, r3
 800408e:	2300      	movs	r3, #0
 8004090:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409e:	461a      	mov	r2, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	461a      	mov	r2, r3
 80040b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	3301      	adds	r3, #1
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3b7      	bcc.n	8004036 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e043      	b.n	8004154 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e2:	d118      	bne.n	8004116 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e013      	b.n	8004128 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	e008      	b.n	8004128 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	461a      	mov	r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	461a      	mov	r2, r3
 8004136:	2300      	movs	r3, #0
 8004138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	461a      	mov	r2, r3
 8004148:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800414c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3301      	adds	r3, #1
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d3b7      	bcc.n	80040cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800417c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <USB_DevInit+0x2c4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f043 0208 	orr.w	r2, r3, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041bc:	f043 0304 	orr.w	r3, r3, #4
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041d0:	b004      	add	sp, #16
 80041d2:	4770      	bx	lr
 80041d4:	803c3800 	.word	0x803c3800

080041d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <USB_FlushTxFifo+0x64>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e01b      	b.n	8004230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	daf2      	bge.n	80041e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	019b      	lsls	r3, r3, #6
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <USB_FlushTxFifo+0x64>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e006      	b.n	8004230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b20      	cmp	r3, #32
 800422c:	d0f0      	beq.n	8004210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	00030d40 	.word	0x00030d40

08004240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3301      	adds	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a11      	ldr	r2, [pc, #68]	; (800429c <USB_FlushRxFifo+0x5c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e018      	b.n	8004290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	daf2      	bge.n	800424c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2210      	movs	r2, #16
 800426e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a08      	ldr	r2, [pc, #32]	; (800429c <USB_FlushRxFifo+0x5c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e006      	b.n	8004290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b10      	cmp	r3, #16
 800428c:	d0f0      	beq.n	8004270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	00030d40 	.word	0x00030d40

080042a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042ec:	f023 0303 	bic.w	r3, r3, #3
 80042f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0301 	and.w	r3, r3, #1
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <USB_CoreReset+0x64>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e01b      	b.n	8004386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	daf2      	bge.n	800433c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f043 0201 	orr.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3301      	adds	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <USB_CoreReset+0x64>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d901      	bls.n	8004378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e006      	b.n	8004386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d0f0      	beq.n	8004366 <USB_CoreReset+0x36>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	00030d40 	.word	0x00030d40

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4d0d      	ldr	r5, [pc, #52]	; (80043d0 <__libc_init_array+0x38>)
 800439c:	4c0d      	ldr	r4, [pc, #52]	; (80043d4 <__libc_init_array+0x3c>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	2600      	movs	r6, #0
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	4d0b      	ldr	r5, [pc, #44]	; (80043d8 <__libc_init_array+0x40>)
 80043aa:	4c0c      	ldr	r4, [pc, #48]	; (80043dc <__libc_init_array+0x44>)
 80043ac:	f000 f87c 	bl	80044a8 <_init>
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	2600      	movs	r6, #0
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	08004848 	.word	0x08004848
 80043d4:	08004848 	.word	0x08004848
 80043d8:	08004848 	.word	0x08004848
 80043dc:	0800484c 	.word	0x0800484c

080043e0 <__itoa>:
 80043e0:	1e93      	subs	r3, r2, #2
 80043e2:	2b22      	cmp	r3, #34	; 0x22
 80043e4:	b510      	push	{r4, lr}
 80043e6:	460c      	mov	r4, r1
 80043e8:	d904      	bls.n	80043f4 <__itoa+0x14>
 80043ea:	2300      	movs	r3, #0
 80043ec:	700b      	strb	r3, [r1, #0]
 80043ee:	461c      	mov	r4, r3
 80043f0:	4620      	mov	r0, r4
 80043f2:	bd10      	pop	{r4, pc}
 80043f4:	2a0a      	cmp	r2, #10
 80043f6:	d109      	bne.n	800440c <__itoa+0x2c>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	da07      	bge.n	800440c <__itoa+0x2c>
 80043fc:	232d      	movs	r3, #45	; 0x2d
 80043fe:	700b      	strb	r3, [r1, #0]
 8004400:	4240      	negs	r0, r0
 8004402:	2101      	movs	r1, #1
 8004404:	4421      	add	r1, r4
 8004406:	f000 f80d 	bl	8004424 <__utoa>
 800440a:	e7f1      	b.n	80043f0 <__itoa+0x10>
 800440c:	2100      	movs	r1, #0
 800440e:	e7f9      	b.n	8004404 <__itoa+0x24>

08004410 <itoa>:
 8004410:	f7ff bfe6 	b.w	80043e0 <__itoa>

08004414 <memset>:
 8004414:	4402      	add	r2, r0
 8004416:	4603      	mov	r3, r0
 8004418:	4293      	cmp	r3, r2
 800441a:	d100      	bne.n	800441e <memset+0xa>
 800441c:	4770      	bx	lr
 800441e:	f803 1b01 	strb.w	r1, [r3], #1
 8004422:	e7f9      	b.n	8004418 <memset+0x4>

08004424 <__utoa>:
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	4c1f      	ldr	r4, [pc, #124]	; (80044a4 <__utoa+0x80>)
 8004428:	b08b      	sub	sp, #44	; 0x2c
 800442a:	4605      	mov	r5, r0
 800442c:	460b      	mov	r3, r1
 800442e:	466e      	mov	r6, sp
 8004430:	f104 0c20 	add.w	ip, r4, #32
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	6861      	ldr	r1, [r4, #4]
 8004438:	4637      	mov	r7, r6
 800443a:	c703      	stmia	r7!, {r0, r1}
 800443c:	3408      	adds	r4, #8
 800443e:	4564      	cmp	r4, ip
 8004440:	463e      	mov	r6, r7
 8004442:	d1f7      	bne.n	8004434 <__utoa+0x10>
 8004444:	7921      	ldrb	r1, [r4, #4]
 8004446:	7139      	strb	r1, [r7, #4]
 8004448:	1e91      	subs	r1, r2, #2
 800444a:	6820      	ldr	r0, [r4, #0]
 800444c:	6038      	str	r0, [r7, #0]
 800444e:	2922      	cmp	r1, #34	; 0x22
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	d904      	bls.n	8004460 <__utoa+0x3c>
 8004456:	7019      	strb	r1, [r3, #0]
 8004458:	460b      	mov	r3, r1
 800445a:	4618      	mov	r0, r3
 800445c:	b00b      	add	sp, #44	; 0x2c
 800445e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004460:	1e58      	subs	r0, r3, #1
 8004462:	4684      	mov	ip, r0
 8004464:	fbb5 f7f2 	udiv	r7, r5, r2
 8004468:	fb02 5617 	mls	r6, r2, r7, r5
 800446c:	3628      	adds	r6, #40	; 0x28
 800446e:	446e      	add	r6, sp
 8004470:	460c      	mov	r4, r1
 8004472:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004476:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800447a:	462e      	mov	r6, r5
 800447c:	42b2      	cmp	r2, r6
 800447e:	f101 0101 	add.w	r1, r1, #1
 8004482:	463d      	mov	r5, r7
 8004484:	d9ee      	bls.n	8004464 <__utoa+0x40>
 8004486:	2200      	movs	r2, #0
 8004488:	545a      	strb	r2, [r3, r1]
 800448a:	1919      	adds	r1, r3, r4
 800448c:	1aa5      	subs	r5, r4, r2
 800448e:	42aa      	cmp	r2, r5
 8004490:	dae3      	bge.n	800445a <__utoa+0x36>
 8004492:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004496:	780e      	ldrb	r6, [r1, #0]
 8004498:	7006      	strb	r6, [r0, #0]
 800449a:	3201      	adds	r2, #1
 800449c:	f801 5901 	strb.w	r5, [r1], #-1
 80044a0:	e7f4      	b.n	800448c <__utoa+0x68>
 80044a2:	bf00      	nop
 80044a4:	08004818 	.word	0x08004818

080044a8 <_init>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr

080044b4 <_fini>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr
